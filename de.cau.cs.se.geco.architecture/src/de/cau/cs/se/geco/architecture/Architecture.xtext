grammar de.cau.cs.se.geco.architecture.Architecture with org.eclipse.xtext.xbase.Xbase

generate architecture "http://www.cau.de/cs/se/geco/architecture/Architecture"

import "http://www.eclipse.org/xtext/xbase/Xbase"
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

Model:
	'package' name=QualifiedName
	'fragments' imports+=Import*
	registeredPackages = XImportSection
	(connections+=Connection | metamodels+=MetamodelSequence)*
;

Import:
	WeaverImport | GeneratorImport
;

WeaverImport:
	'weave' importedNamespace = QualifiedName
;

GeneratorImport:
	'gen' importedNamespace = QualifiedName
;

MetamodelSequence:
	'model' type=JvmTypeReference metamodels+=Metamodel (',' metamodels+=Metamodel)*
;

Metamodel:
	name=ID 
;

//XImportDeclaration: 
//	'import' (
//		importedType=[types::JvmDeclaredType|QualifiedName] | 
//		importedNamespace=QualifiedNameWithWildcard
//	) 
//;

Connection:
	Generator | Weaver
;

Weaver:
	'weave' weaver=[WeaverImport|ID]  
		sourceModel=SourceModelNodeSelector
		aspectModel=AspectModel
		('=>' targetModel=TargetModelNodeType)?
;

AspectModel:
	(':' TargetModelNodeType) | Generator
;
	
Generator:
	'generate' generator=[GeneratorImport|ID] 
		sourceModel=SourceModelNodeSelector
		targetModel=TargetModelNodeType
		('->' writeTraceModel=TraceModel)?
		('<-' readTraceModels+=[TraceModel|ID] (',' readTraceModels+=[TraceModel|ID])*)?
;

SourceModelNodeSelector: 
	reference = [Metamodel|ID] ('/' property=XMemberFeatureCall)? | 
	{SourceModelNodeSelector} 'null' 
;

TargetModelNodeType: {TargetModelNodeType}
	(reference = [Metamodel|ID])? (multiply?='*')?
;

TraceModel:
	name=ID '<' nodeSetRelations+=NodeSetRelation+ '>'
;

NodeSetRelation:
	'(' 
		sourceNodes+=JvmTypeReference (',' sourceNodes+=JvmTypeReference)*
	':' 
		targetNodes+=JvmTypeReference (',' targetNodes+=JvmTypeReference)* 
	')'
;

   
