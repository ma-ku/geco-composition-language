grammar de.cau.cs.se.geco.architecture.Architecture with org.eclipse.xtext.xbase.Xbase

generate architecture "http://www.cau.de/cs/se/geco/architecture/Architecture"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	'package' name=QualifiedName
	importSection=XImportSection?
	metamodels+=Metamodel+ 
	// prerequisites
	// handle results
	connections+=Connection*
;

Metamodel:
	Source | Target | Intermediate
;

SourceMetamodel:
	Source | Intermediate
;
TargetMetamodel:
	Target | Intermediate
;

Intermediate:
	'intermediate' name=ValidID 
	'source' sourceInstanceMultiplicity=ModelMultiplicity
	'target' targetInstanceMultiplicity=ModelMultiplicity
	location=MetamodelLocation 
;

Source:
	'source' name=ValidID sourceInstanceMultiplicity=ModelMultiplicity location=MetamodelLocation 
;

Target:
	'target' name=ValidID targetInstanceMultiplicity=ModelMultiplicity (location=MetamodelLocation|(isText?='text' extension=STRING))
;

enum ModelMultiplicity:
	SINGLE = 'single' |
	MULTIPLE = 'multiple'
;

MetamodelLocation:
	url=STRING
;

Connection:
	'gen' generator=JvmTypeReference source=SourceNodeType ':' 
	('->' writeTraceModel=TraceModel)?
	('<-' readTraceModels+=[TraceModel|ValidID] (',' readTraceModels+=[TraceModel|ValidID])*)
;

SourceNodeType:
	model=[SourceMetamodel|ValidID] '/' eclass=[ecore::EClass|ValidID]
;

TargetNodeType:
	target=[TargetMetamodel|ValidID] '/' eclass=[ecore::EClass|ValidID]
;

TraceModel:
	name=ValidID '<' nodeSetRelations+=NodeSetRelation+ '>'
;

NodeSetRelation:
	'(' 
		sourceNodes+=NodeType (',' sourceNodes+=NodeType)*
	':' 
		targetNodes+=NodeType (',' targetNodes+=NodeType)* 
	')'
;

NodeType: eclass=[ecore::EClass|ValidID];
