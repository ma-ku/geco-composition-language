/*
* generated by Xtext
*/
package de.cau.cs.se.geco.architecture.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class ArchitectureGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cImportSectionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportSectionXImportSectionParserRuleCall_2_0 = (RuleCall)cImportSectionAssignment_2.eContents().get(0);
		private final Assignment cRegisteredPackagesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRegisteredPackagesRegisteredPackageParserRuleCall_3_0 = (RuleCall)cRegisteredPackagesAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cConectionsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cConectionsConnectionParserRuleCall_4_0_0 = (RuleCall)cConectionsAssignment_4_0.eContents().get(0);
		private final Assignment cMetamodelsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cMetamodelsMetamodelSequenceParserRuleCall_4_1_0 = (RuleCall)cMetamodelsAssignment_4_1.eContents().get(0);
		
		//Model:
		//	"package" name=QualifiedName importSection=XImportSection? registeredPackages+=RegisteredPackage+
		//	(conections+=Connection // prerequisites
		//	// handle results
		//	| metamodels+=MetamodelSequence)*;
		public ParserRule getRule() { return rule; }

		//"package" name=QualifiedName importSection=XImportSection? registeredPackages+=RegisteredPackage+
		//(conections+=Connection // prerequisites
		//// handle results
		//| metamodels+=MetamodelSequence)*
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//importSection=XImportSection?
		public Assignment getImportSectionAssignment_2() { return cImportSectionAssignment_2; }

		//XImportSection
		public RuleCall getImportSectionXImportSectionParserRuleCall_2_0() { return cImportSectionXImportSectionParserRuleCall_2_0; }

		//registeredPackages+=RegisteredPackage+
		public Assignment getRegisteredPackagesAssignment_3() { return cRegisteredPackagesAssignment_3; }

		//RegisteredPackage
		public RuleCall getRegisteredPackagesRegisteredPackageParserRuleCall_3_0() { return cRegisteredPackagesRegisteredPackageParserRuleCall_3_0; }

		//(conections+=Connection // prerequisites
		//// handle results
		//| metamodels+=MetamodelSequence)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//conections+=Connection
		public Assignment getConectionsAssignment_4_0() { return cConectionsAssignment_4_0; }

		//Connection
		public RuleCall getConectionsConnectionParserRuleCall_4_0_0() { return cConectionsConnectionParserRuleCall_4_0_0; }

		//metamodels+=MetamodelSequence
		public Assignment getMetamodelsAssignment_4_1() { return cMetamodelsAssignment_4_1; }

		//MetamodelSequence
		public RuleCall getMetamodelsMetamodelSequenceParserRuleCall_4_1_0() { return cMetamodelsMetamodelSequenceParserRuleCall_4_1_0; }
	}

	public class MetamodelSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetamodelSequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeModelNodeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cMetamodelsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMetamodelsMetamodelParserRuleCall_2_0 = (RuleCall)cMetamodelsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMetamodelsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMetamodelsMetamodelParserRuleCall_3_1_0 = (RuleCall)cMetamodelsAssignment_3_1.eContents().get(0);
		
		//MetamodelSequence:
		//	"model" type=ModelNodeType metamodels+=Metamodel ("," metamodels+=Metamodel)*;
		public ParserRule getRule() { return rule; }

		//"model" type=ModelNodeType metamodels+=Metamodel ("," metamodels+=Metamodel)*
		public Group getGroup() { return cGroup; }

		//"model"
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }

		//type=ModelNodeType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ModelNodeType
		public RuleCall getTypeModelNodeTypeParserRuleCall_1_0() { return cTypeModelNodeTypeParserRuleCall_1_0; }

		//metamodels+=Metamodel
		public Assignment getMetamodelsAssignment_2() { return cMetamodelsAssignment_2; }

		//Metamodel
		public RuleCall getMetamodelsMetamodelParserRuleCall_2_0() { return cMetamodelsMetamodelParserRuleCall_2_0; }

		//("," metamodels+=Metamodel)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//metamodels+=Metamodel
		public Assignment getMetamodelsAssignment_3_1() { return cMetamodelsAssignment_3_1; }

		//Metamodel
		public RuleCall getMetamodelsMetamodelParserRuleCall_3_1_0() { return cMetamodelsMetamodelParserRuleCall_3_1_0; }
	}

	public class MetamodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Metamodel");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Metamodel:
		//	name=ValidID;
		public ParserRule getRule() { return rule; }

		//name=ValidID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0() { return cNameValidIDParserRuleCall_0; }
	}

	public class RegisteredPackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RegisteredPackage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRegisterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cModelPackageAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cModelPackageEPackageCrossReference_2_0_0 = (CrossReference)cModelPackageAssignment_2_0.eContents().get(0);
		private final RuleCall cModelPackageEPackageSTRINGTerminalRuleCall_2_0_0_1 = (RuleCall)cModelPackageEPackageCrossReference_2_0_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cIsTextAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final Keyword cIsTextTextKeyword_2_1_0_0 = (Keyword)cIsTextAssignment_2_1_0.eContents().get(0);
		private final Assignment cExtensionAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cExtensionSTRINGTerminalRuleCall_2_1_1_0 = (RuleCall)cExtensionAssignment_2_1_1.eContents().get(0);
		
		//RegisteredPackage:
		//	"register" name=ValidID (modelPackage=[ecore::EPackage|STRING] | isText?="text" extension=STRING);
		public ParserRule getRule() { return rule; }

		//"register" name=ValidID (modelPackage=[ecore::EPackage|STRING] | isText?="text" extension=STRING)
		public Group getGroup() { return cGroup; }

		//"register"
		public Keyword getRegisterKeyword_0() { return cRegisterKeyword_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//modelPackage=[ecore::EPackage|STRING] | isText?="text" extension=STRING
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//modelPackage=[ecore::EPackage|STRING]
		public Assignment getModelPackageAssignment_2_0() { return cModelPackageAssignment_2_0; }

		//[ecore::EPackage|STRING]
		public CrossReference getModelPackageEPackageCrossReference_2_0_0() { return cModelPackageEPackageCrossReference_2_0_0; }

		//STRING
		public RuleCall getModelPackageEPackageSTRINGTerminalRuleCall_2_0_0_1() { return cModelPackageEPackageSTRINGTerminalRuleCall_2_0_0_1; }

		//isText?="text" extension=STRING
		public Group getGroup_2_1() { return cGroup_2_1; }

		//isText?="text"
		public Assignment getIsTextAssignment_2_1_0() { return cIsTextAssignment_2_1_0; }

		//"text"
		public Keyword getIsTextTextKeyword_2_1_0_0() { return cIsTextTextKeyword_2_1_0_0; }

		//extension=STRING
		public Assignment getExtensionAssignment_2_1_1() { return cExtensionAssignment_2_1_1; }

		//STRING
		public RuleCall getExtensionSTRINGTerminalRuleCall_2_1_1_0() { return cExtensionSTRINGTerminalRuleCall_2_1_1_0; }
	}

	public class ConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Connection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGeneratorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWeaverParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Connection:
		//	Generator | Weaver;
		public ParserRule getRule() { return rule; }

		//Generator | Weaver
		public Alternatives getAlternatives() { return cAlternatives; }

		//Generator
		public RuleCall getGeneratorParserRuleCall_0() { return cGeneratorParserRuleCall_0; }

		//Weaver
		public RuleCall getWeaverParserRuleCall_1() { return cWeaverParserRuleCall_1; }
	}

	public class WeaverElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Weaver");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWeaveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWeaverAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWeaverJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cWeaverAssignment_1.eContents().get(0);
		private final Assignment cSourceModelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSourceModelSourceModelNodeSelectorParserRuleCall_2_0 = (RuleCall)cSourceModelAssignment_2.eContents().get(0);
		private final Assignment cAspectModelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAspectModelAspectModelParserRuleCall_3_0 = (RuleCall)cAspectModelAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignGreaterThanSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTargetModelAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTargetModelTargetModelNodeTypeParserRuleCall_4_1_0 = (RuleCall)cTargetModelAssignment_4_1.eContents().get(0);
		
		//Weaver:
		//	"weave" weaver=JvmTypeReference sourceModel=SourceModelNodeSelector aspectModel=AspectModel ("=>"
		//	targetModel=TargetModelNodeType)?;
		public ParserRule getRule() { return rule; }

		//"weave" weaver=JvmTypeReference sourceModel=SourceModelNodeSelector aspectModel=AspectModel ("=>"
		//targetModel=TargetModelNodeType)?
		public Group getGroup() { return cGroup; }

		//"weave"
		public Keyword getWeaveKeyword_0() { return cWeaveKeyword_0; }

		//weaver=JvmTypeReference
		public Assignment getWeaverAssignment_1() { return cWeaverAssignment_1; }

		//JvmTypeReference
		public RuleCall getWeaverJvmTypeReferenceParserRuleCall_1_0() { return cWeaverJvmTypeReferenceParserRuleCall_1_0; }

		//sourceModel=SourceModelNodeSelector
		public Assignment getSourceModelAssignment_2() { return cSourceModelAssignment_2; }

		//SourceModelNodeSelector
		public RuleCall getSourceModelSourceModelNodeSelectorParserRuleCall_2_0() { return cSourceModelSourceModelNodeSelectorParserRuleCall_2_0; }

		//aspectModel=AspectModel
		public Assignment getAspectModelAssignment_3() { return cAspectModelAssignment_3; }

		//AspectModel
		public RuleCall getAspectModelAspectModelParserRuleCall_3_0() { return cAspectModelAspectModelParserRuleCall_3_0; }

		//("=>" targetModel=TargetModelNodeType)?
		public Group getGroup_4() { return cGroup_4; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_4_0() { return cEqualsSignGreaterThanSignKeyword_4_0; }

		//targetModel=TargetModelNodeType
		public Assignment getTargetModelAssignment_4_1() { return cTargetModelAssignment_4_1; }

		//TargetModelNodeType
		public RuleCall getTargetModelTargetModelNodeTypeParserRuleCall_4_1_0() { return cTargetModelTargetModelNodeTypeParserRuleCall_4_1_0; }
	}

	public class AspectModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AspectModel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cColonKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cTargetModelNodeTypeParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cGeneratorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AspectModel:
		//	":" TargetModelNodeType | Generator;
		public ParserRule getRule() { return rule; }

		//":" TargetModelNodeType | Generator
		public Alternatives getAlternatives() { return cAlternatives; }

		//":" TargetModelNodeType
		public Group getGroup_0() { return cGroup_0; }

		//":"
		public Keyword getColonKeyword_0_0() { return cColonKeyword_0_0; }

		//TargetModelNodeType
		public RuleCall getTargetModelNodeTypeParserRuleCall_0_1() { return cTargetModelNodeTypeParserRuleCall_0_1; }

		//Generator
		public RuleCall getGeneratorParserRuleCall_1() { return cGeneratorParserRuleCall_1; }
	}

	public class GeneratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Generator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGenerateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGeneratorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGeneratorJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cGeneratorAssignment_1.eContents().get(0);
		private final Assignment cSourceModelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSourceModelSourceModelNodeSelectorParserRuleCall_2_0 = (RuleCall)cSourceModelAssignment_2.eContents().get(0);
		private final Assignment cTargetModelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTargetModelTargetModelNodeTypeParserRuleCall_3_0 = (RuleCall)cTargetModelAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cWriteTraceModelAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cWriteTraceModelTraceModelParserRuleCall_4_1_0 = (RuleCall)cWriteTraceModelAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLessThanSignHyphenMinusKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cReadTraceModelsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cReadTraceModelsTraceModelCrossReference_5_1_0 = (CrossReference)cReadTraceModelsAssignment_5_1.eContents().get(0);
		private final RuleCall cReadTraceModelsTraceModelValidIDParserRuleCall_5_1_0_1 = (RuleCall)cReadTraceModelsTraceModelCrossReference_5_1_0.eContents().get(1);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cReadTraceModelsAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final CrossReference cReadTraceModelsTraceModelCrossReference_5_2_1_0 = (CrossReference)cReadTraceModelsAssignment_5_2_1.eContents().get(0);
		private final RuleCall cReadTraceModelsTraceModelValidIDParserRuleCall_5_2_1_0_1 = (RuleCall)cReadTraceModelsTraceModelCrossReference_5_2_1_0.eContents().get(1);
		
		//Generator:
		//	"generate" generator=JvmTypeReference sourceModel=SourceModelNodeSelector targetModel=TargetModelNodeType ("->"
		//	writeTraceModel=TraceModel)? ("<-" readTraceModels+=[TraceModel|ValidID] (","
		//	readTraceModels+=[TraceModel|ValidID])*)?;
		public ParserRule getRule() { return rule; }

		//"generate" generator=JvmTypeReference sourceModel=SourceModelNodeSelector targetModel=TargetModelNodeType ("->"
		//writeTraceModel=TraceModel)? ("<-" readTraceModels+=[TraceModel|ValidID] ("," readTraceModels+=[TraceModel|ValidID])*)?
		public Group getGroup() { return cGroup; }

		//"generate"
		public Keyword getGenerateKeyword_0() { return cGenerateKeyword_0; }

		//generator=JvmTypeReference
		public Assignment getGeneratorAssignment_1() { return cGeneratorAssignment_1; }

		//JvmTypeReference
		public RuleCall getGeneratorJvmTypeReferenceParserRuleCall_1_0() { return cGeneratorJvmTypeReferenceParserRuleCall_1_0; }

		//sourceModel=SourceModelNodeSelector
		public Assignment getSourceModelAssignment_2() { return cSourceModelAssignment_2; }

		//SourceModelNodeSelector
		public RuleCall getSourceModelSourceModelNodeSelectorParserRuleCall_2_0() { return cSourceModelSourceModelNodeSelectorParserRuleCall_2_0; }

		//targetModel=TargetModelNodeType
		public Assignment getTargetModelAssignment_3() { return cTargetModelAssignment_3; }

		//TargetModelNodeType
		public RuleCall getTargetModelTargetModelNodeTypeParserRuleCall_3_0() { return cTargetModelTargetModelNodeTypeParserRuleCall_3_0; }

		//("->" writeTraceModel=TraceModel)?
		public Group getGroup_4() { return cGroup_4; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_4_0() { return cHyphenMinusGreaterThanSignKeyword_4_0; }

		//writeTraceModel=TraceModel
		public Assignment getWriteTraceModelAssignment_4_1() { return cWriteTraceModelAssignment_4_1; }

		//TraceModel
		public RuleCall getWriteTraceModelTraceModelParserRuleCall_4_1_0() { return cWriteTraceModelTraceModelParserRuleCall_4_1_0; }

		//("<-" readTraceModels+=[TraceModel|ValidID] ("," readTraceModels+=[TraceModel|ValidID])*)?
		public Group getGroup_5() { return cGroup_5; }

		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_5_0() { return cLessThanSignHyphenMinusKeyword_5_0; }

		//readTraceModels+=[TraceModel|ValidID]
		public Assignment getReadTraceModelsAssignment_5_1() { return cReadTraceModelsAssignment_5_1; }

		//[TraceModel|ValidID]
		public CrossReference getReadTraceModelsTraceModelCrossReference_5_1_0() { return cReadTraceModelsTraceModelCrossReference_5_1_0; }

		//ValidID
		public RuleCall getReadTraceModelsTraceModelValidIDParserRuleCall_5_1_0_1() { return cReadTraceModelsTraceModelValidIDParserRuleCall_5_1_0_1; }

		//("," readTraceModels+=[TraceModel|ValidID])*
		public Group getGroup_5_2() { return cGroup_5_2; }

		//","
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }

		//readTraceModels+=[TraceModel|ValidID]
		public Assignment getReadTraceModelsAssignment_5_2_1() { return cReadTraceModelsAssignment_5_2_1; }

		//[TraceModel|ValidID]
		public CrossReference getReadTraceModelsTraceModelCrossReference_5_2_1_0() { return cReadTraceModelsTraceModelCrossReference_5_2_1_0; }

		//ValidID
		public RuleCall getReadTraceModelsTraceModelValidIDParserRuleCall_5_2_1_0_1() { return cReadTraceModelsTraceModelValidIDParserRuleCall_5_2_1_0_1; }
	}

	public class SourceModelNodeSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SourceModelNodeSelector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cReferenceAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cReferenceMetamodelCrossReference_0_0_0 = (CrossReference)cReferenceAssignment_0_0.eContents().get(0);
		private final RuleCall cReferenceMetamodelValidIDParserRuleCall_0_0_0_1 = (RuleCall)cReferenceMetamodelCrossReference_0_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cSolidusKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cPropertyAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cPropertyNodePropertyParserRuleCall_0_1_1_0 = (RuleCall)cPropertyAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSourceModelNodeSelectorAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cNullKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//SourceModelNodeSelector:
		//	reference=[Metamodel|ValidID] ("/" property=NodeProperty)? | {SourceModelNodeSelector} "null";
		public ParserRule getRule() { return rule; }

		//reference=[Metamodel|ValidID] ("/" property=NodeProperty)? | {SourceModelNodeSelector} "null"
		public Alternatives getAlternatives() { return cAlternatives; }

		//reference=[Metamodel|ValidID] ("/" property=NodeProperty)?
		public Group getGroup_0() { return cGroup_0; }

		//reference=[Metamodel|ValidID]
		public Assignment getReferenceAssignment_0_0() { return cReferenceAssignment_0_0; }

		//[Metamodel|ValidID]
		public CrossReference getReferenceMetamodelCrossReference_0_0_0() { return cReferenceMetamodelCrossReference_0_0_0; }

		//ValidID
		public RuleCall getReferenceMetamodelValidIDParserRuleCall_0_0_0_1() { return cReferenceMetamodelValidIDParserRuleCall_0_0_0_1; }

		//("/" property=NodeProperty)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"/"
		public Keyword getSolidusKeyword_0_1_0() { return cSolidusKeyword_0_1_0; }

		//property=NodeProperty
		public Assignment getPropertyAssignment_0_1_1() { return cPropertyAssignment_0_1_1; }

		//NodeProperty
		public RuleCall getPropertyNodePropertyParserRuleCall_0_1_1_0() { return cPropertyNodePropertyParserRuleCall_0_1_1_0; }

		//{SourceModelNodeSelector} "null"
		public Group getGroup_1() { return cGroup_1; }

		//{SourceModelNodeSelector}
		public Action getSourceModelNodeSelectorAction_1_0() { return cSourceModelNodeSelectorAction_1_0; }

		//"null"
		public Keyword getNullKeyword_1_1() { return cNullKeyword_1_1; }
	}

	public class TargetModelNodeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TargetModelNodeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTargetModelNodeTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferenceMetamodelCrossReference_1_0 = (CrossReference)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cReferenceMetamodelValidIDParserRuleCall_1_0_1 = (RuleCall)cReferenceMetamodelCrossReference_1_0.eContents().get(1);
		private final Assignment cMultiplyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cMultiplyAsteriskKeyword_2_0 = (Keyword)cMultiplyAssignment_2.eContents().get(0);
		
		//TargetModelNodeType:
		//	{TargetModelNodeType} reference=[Metamodel|ValidID]? multiply?="*"?;
		public ParserRule getRule() { return rule; }

		//{TargetModelNodeType} reference=[Metamodel|ValidID]? multiply?="*"?
		public Group getGroup() { return cGroup; }

		//{TargetModelNodeType}
		public Action getTargetModelNodeTypeAction_0() { return cTargetModelNodeTypeAction_0; }

		//reference=[Metamodel|ValidID]?
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }

		//[Metamodel|ValidID]
		public CrossReference getReferenceMetamodelCrossReference_1_0() { return cReferenceMetamodelCrossReference_1_0; }

		//ValidID
		public RuleCall getReferenceMetamodelValidIDParserRuleCall_1_0_1() { return cReferenceMetamodelValidIDParserRuleCall_1_0_1; }

		//multiply?="*"?
		public Assignment getMultiplyAssignment_2() { return cMultiplyAssignment_2; }

		//"*"
		public Keyword getMultiplyAsteriskKeyword_2_0() { return cMultiplyAsteriskKeyword_2_0; }
	}

	public class ModelNodeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelNodeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTargetRegisteredPackageCrossReference_0_0 = (CrossReference)cTargetAssignment_0.eContents().get(0);
		private final RuleCall cTargetRegisteredPackageValidIDParserRuleCall_0_0_1 = (RuleCall)cTargetRegisteredPackageCrossReference_0_0.eContents().get(1);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeEClassCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeEClassValidIDParserRuleCall_2_0_1 = (RuleCall)cTypeEClassCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSolidusKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPropertyAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPropertyNodePropertyParserRuleCall_3_1_0 = (RuleCall)cPropertyAssignment_3_1.eContents().get(0);
		
		//ModelNodeType:
		//	target=[RegisteredPackage|ValidID] "/" type=[ecore::EClass|ValidID] ("/" property=NodeProperty)?;
		public ParserRule getRule() { return rule; }

		//target=[RegisteredPackage|ValidID] "/" type=[ecore::EClass|ValidID] ("/" property=NodeProperty)?
		public Group getGroup() { return cGroup; }

		//target=[RegisteredPackage|ValidID]
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }

		//[RegisteredPackage|ValidID]
		public CrossReference getTargetRegisteredPackageCrossReference_0_0() { return cTargetRegisteredPackageCrossReference_0_0; }

		//ValidID
		public RuleCall getTargetRegisteredPackageValidIDParserRuleCall_0_0_1() { return cTargetRegisteredPackageValidIDParserRuleCall_0_0_1; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//type=[ecore::EClass|ValidID]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[ecore::EClass|ValidID]
		public CrossReference getTypeEClassCrossReference_2_0() { return cTypeEClassCrossReference_2_0; }

		//ValidID
		public RuleCall getTypeEClassValidIDParserRuleCall_2_0_1() { return cTypeEClassValidIDParserRuleCall_2_0_1; }

		//("/" property=NodeProperty)?
		public Group getGroup_3() { return cGroup_3; }

		//"/"
		public Keyword getSolidusKeyword_3_0() { return cSolidusKeyword_3_0; }

		//property=NodeProperty
		public Assignment getPropertyAssignment_3_1() { return cPropertyAssignment_3_1; }

		//NodeProperty
		public RuleCall getPropertyNodePropertyParserRuleCall_3_1_0() { return cPropertyNodePropertyParserRuleCall_3_1_0; }
	}

	public class NodePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPropertyEReferenceCrossReference_0_0 = (CrossReference)cPropertyAssignment_0.eContents().get(0);
		private final RuleCall cPropertyEReferenceValidIDParserRuleCall_0_0_1 = (RuleCall)cPropertyEReferenceCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConstraintAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConstraintConstraintExpressionParserRuleCall_1_1_0 = (RuleCall)cConstraintAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSolidusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSubPropertyAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSubPropertyNodePropertyParserRuleCall_2_1_0 = (RuleCall)cSubPropertyAssignment_2_1.eContents().get(0);
		
		//NodeProperty:
		//	property=[ecore::EReference|ValidID] ("[" constraint=ConstraintExpression "]")? ("/" subProperty=NodeProperty)?;
		public ParserRule getRule() { return rule; }

		//property=[ecore::EReference|ValidID] ("[" constraint=ConstraintExpression "]")? ("/" subProperty=NodeProperty)?
		public Group getGroup() { return cGroup; }

		//property=[ecore::EReference|ValidID]
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }

		//[ecore::EReference|ValidID]
		public CrossReference getPropertyEReferenceCrossReference_0_0() { return cPropertyEReferenceCrossReference_0_0; }

		//ValidID
		public RuleCall getPropertyEReferenceValidIDParserRuleCall_0_0_1() { return cPropertyEReferenceValidIDParserRuleCall_0_0_1; }

		//("[" constraint=ConstraintExpression "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//constraint=ConstraintExpression
		public Assignment getConstraintAssignment_1_1() { return cConstraintAssignment_1_1; }

		//ConstraintExpression
		public RuleCall getConstraintConstraintExpressionParserRuleCall_1_1_0() { return cConstraintConstraintExpressionParserRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }

		//("/" subProperty=NodeProperty)?
		public Group getGroup_2() { return cGroup_2; }

		//"/"
		public Keyword getSolidusKeyword_2_0() { return cSolidusKeyword_2_0; }

		//subProperty=NodeProperty
		public Assignment getSubPropertyAssignment_2_1() { return cSubPropertyAssignment_2_1; }

		//NodeProperty
		public RuleCall getSubPropertyNodePropertyParserRuleCall_2_1_0() { return cSubPropertyNodePropertyParserRuleCall_2_1_0; }
	}

	public class ConstraintExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstraintExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCompareExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cConstraintExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperatorLogicOperatorParserRuleCall_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightConstraintExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//ConstraintExpression:
		//	CompareExpression (=> ({ConstraintExpression.left=current} operator=LogicOperator) right=ConstraintExpression)?;
		public ParserRule getRule() { return rule; }

		//CompareExpression (=> ({ConstraintExpression.left=current} operator=LogicOperator) right=ConstraintExpression)?
		public Group getGroup() { return cGroup; }

		//CompareExpression
		public RuleCall getCompareExpressionParserRuleCall_0() { return cCompareExpressionParserRuleCall_0; }

		//(=> ({ConstraintExpression.left=current} operator=LogicOperator) right=ConstraintExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({ConstraintExpression.left=current} operator=LogicOperator)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{ConstraintExpression.left=current} operator=LogicOperator
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{ConstraintExpression.left=current}
		public Action getConstraintExpressionLeftAction_1_0_0_0() { return cConstraintExpressionLeftAction_1_0_0_0; }

		//operator=LogicOperator
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }

		//LogicOperator
		public RuleCall getOperatorLogicOperatorParserRuleCall_1_0_0_1_0() { return cOperatorLogicOperatorParserRuleCall_1_0_0_1_0; }

		//right=ConstraintExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ConstraintExpression
		public RuleCall getRightConstraintExpressionParserRuleCall_1_1_0() { return cRightConstraintExpressionParserRuleCall_1_1_0; }
	}

	public class CompareExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompareExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBasicConstraintParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cConstraintExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperatorComparatorParserRuleCall_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightBasicConstraintParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//CompareExpression returns ConstraintExpression:
		//	BasicConstraint (=> ({ConstraintExpression.left=current} operator=Comparator) right=BasicConstraint)?;
		public ParserRule getRule() { return rule; }

		//BasicConstraint (=> ({ConstraintExpression.left=current} operator=Comparator) right=BasicConstraint)?
		public Group getGroup() { return cGroup; }

		//BasicConstraint
		public RuleCall getBasicConstraintParserRuleCall_0() { return cBasicConstraintParserRuleCall_0; }

		//(=> ({ConstraintExpression.left=current} operator=Comparator) right=BasicConstraint)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({ConstraintExpression.left=current} operator=Comparator)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{ConstraintExpression.left=current} operator=Comparator
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{ConstraintExpression.left=current}
		public Action getConstraintExpressionLeftAction_1_0_0_0() { return cConstraintExpressionLeftAction_1_0_0_0; }

		//operator=Comparator
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }

		//Comparator
		public RuleCall getOperatorComparatorParserRuleCall_1_0_0_1_0() { return cOperatorComparatorParserRuleCall_1_0_0_1_0; }

		//right=BasicConstraint
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//BasicConstraint
		public RuleCall getRightBasicConstraintParserRuleCall_1_1_0() { return cRightBasicConstraintParserRuleCall_1_1_0; }
	}

	public class BasicConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParenthesisConstraintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperandParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BasicConstraint returns ConstraintExpression:
		//	ParenthesisConstraint | Operand;
		public ParserRule getRule() { return rule; }

		//ParenthesisConstraint | Operand
		public Alternatives getAlternatives() { return cAlternatives; }

		//ParenthesisConstraint
		public RuleCall getParenthesisConstraintParserRuleCall_0() { return cParenthesisConstraintParserRuleCall_0; }

		//Operand
		public RuleCall getOperandParserRuleCall_1() { return cOperandParserRuleCall_1; }
	}

	public class ParenthesisConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParenthesisConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConstraintAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstraintConstraintExpressionParserRuleCall_1_0 = (RuleCall)cConstraintAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParenthesisConstraint returns ConstraintExpression:
		//	"(" constraint=ConstraintExpression ")";
		public ParserRule getRule() { return rule; }

		//"(" constraint=ConstraintExpression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//constraint=ConstraintExpression
		public Assignment getConstraintAssignment_1() { return cConstraintAssignment_1; }

		//ConstraintExpression
		public RuleCall getConstraintConstraintExpressionParserRuleCall_1_0() { return cConstraintConstraintExpressionParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class OperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNodePropertyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Operand:
		//	Literal | NodeProperty;
		public ParserRule getRule() { return rule; }

		//Literal | NodeProperty
		public Alternatives getAlternatives() { return cAlternatives; }

		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }

		//NodeProperty
		public RuleCall getNodePropertyParserRuleCall_1() { return cNodePropertyParserRuleCall_1; }
	}

	public class TraceModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TraceModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNodeSetRelationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNodeSetRelationsNodeSetRelationParserRuleCall_2_0 = (RuleCall)cNodeSetRelationsAssignment_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TraceModel:
		//	name=ValidID "<" nodeSetRelations+=NodeSetRelation+ ">";
		public ParserRule getRule() { return rule; }

		//name=ValidID "<" nodeSetRelations+=NodeSetRelation+ ">"
		public Group getGroup() { return cGroup; }

		//name=ValidID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0() { return cNameValidIDParserRuleCall_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//nodeSetRelations+=NodeSetRelation+
		public Assignment getNodeSetRelationsAssignment_2() { return cNodeSetRelationsAssignment_2; }

		//NodeSetRelation
		public RuleCall getNodeSetRelationsNodeSetRelationParserRuleCall_2_0() { return cNodeSetRelationsNodeSetRelationParserRuleCall_2_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}

	public class NodeSetRelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeSetRelation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceNodesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSourceNodesNodeTypeParserRuleCall_1_0 = (RuleCall)cSourceNodesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSourceNodesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSourceNodesNodeTypeParserRuleCall_2_1_0 = (RuleCall)cSourceNodesAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetNodesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTargetNodesNodeTypeParserRuleCall_4_0 = (RuleCall)cTargetNodesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTargetNodesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTargetNodesNodeTypeParserRuleCall_5_1_0 = (RuleCall)cTargetNodesAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//NodeSetRelation:
		//	"(" sourceNodes+=NodeType ("," sourceNodes+=NodeType)* ":" targetNodes+=NodeType ("," targetNodes+=NodeType)* ")";
		public ParserRule getRule() { return rule; }

		//"(" sourceNodes+=NodeType ("," sourceNodes+=NodeType)* ":" targetNodes+=NodeType ("," targetNodes+=NodeType)* ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//sourceNodes+=NodeType
		public Assignment getSourceNodesAssignment_1() { return cSourceNodesAssignment_1; }

		//NodeType
		public RuleCall getSourceNodesNodeTypeParserRuleCall_1_0() { return cSourceNodesNodeTypeParserRuleCall_1_0; }

		//("," sourceNodes+=NodeType)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//sourceNodes+=NodeType
		public Assignment getSourceNodesAssignment_2_1() { return cSourceNodesAssignment_2_1; }

		//NodeType
		public RuleCall getSourceNodesNodeTypeParserRuleCall_2_1_0() { return cSourceNodesNodeTypeParserRuleCall_2_1_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//targetNodes+=NodeType
		public Assignment getTargetNodesAssignment_4() { return cTargetNodesAssignment_4; }

		//NodeType
		public RuleCall getTargetNodesNodeTypeParserRuleCall_4_0() { return cTargetNodesNodeTypeParserRuleCall_4_0; }

		//("," targetNodes+=NodeType)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//targetNodes+=NodeType
		public Assignment getTargetNodesAssignment_5_1() { return cTargetNodesAssignment_5_1; }

		//NodeType
		public RuleCall getTargetNodesNodeTypeParserRuleCall_5_1_0() { return cTargetNodesNodeTypeParserRuleCall_5_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class NodeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeType");
		private final Assignment cEclassAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cEclassEClassCrossReference_0 = (CrossReference)cEclassAssignment.eContents().get(0);
		private final RuleCall cEclassEClassValidIDParserRuleCall_0_1 = (RuleCall)cEclassEClassCrossReference_0.eContents().get(1);
		
		//NodeType:
		//	eclass=[ecore::EClass|ValidID];
		public ParserRule getRule() { return rule; }

		//eclass=[ecore::EClass|ValidID]
		public Assignment getEclassAssignment() { return cEclassAssignment; }

		//[ecore::EClass|ValidID]
		public CrossReference getEclassEClassCrossReference_0() { return cEclassEClassCrossReference_0; }

		//ValidID
		public RuleCall getEclassEClassValidIDParserRuleCall_0_1() { return cEclassEClassValidIDParserRuleCall_0_1; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFloatLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cArrayLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//// -----------------------------------
		//// Literal
		//Literal:
		//	StringLiteral | IntLiteral | FloatLiteral | BooleanLiteral | ArrayLiteral;
		public ParserRule getRule() { return rule; }

		//StringLiteral | IntLiteral | FloatLiteral | BooleanLiteral | ArrayLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_0() { return cStringLiteralParserRuleCall_0; }

		//IntLiteral
		public RuleCall getIntLiteralParserRuleCall_1() { return cIntLiteralParserRuleCall_1; }

		//FloatLiteral
		public RuleCall getFloatLiteralParserRuleCall_2() { return cFloatLiteralParserRuleCall_2; }

		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_3() { return cBooleanLiteralParserRuleCall_3; }

		//ArrayLiteral
		public RuleCall getArrayLiteralParserRuleCall_4() { return cArrayLiteralParserRuleCall_4; }
	}

	public class ArrayLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLiteralsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLiteralsLiteralParserRuleCall_1_0 = (RuleCall)cLiteralsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLiteralsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLiteralsLiteralParserRuleCall_2_1_0 = (RuleCall)cLiteralsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ArrayLiteral:
		//	"{" literals+=Literal ("," literals+=Literal)* "}";
		public ParserRule getRule() { return rule; }

		//"{" literals+=Literal ("," literals+=Literal)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//literals+=Literal
		public Assignment getLiteralsAssignment_1() { return cLiteralsAssignment_1; }

		//Literal
		public RuleCall getLiteralsLiteralParserRuleCall_1_0() { return cLiteralsLiteralParserRuleCall_1_0; }

		//("," literals+=Literal)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//literals+=Literal
		public Assignment getLiteralsAssignment_2_1() { return cLiteralsAssignment_2_1; }

		//Literal
		public RuleCall getLiteralsLiteralParserRuleCall_2_1_0() { return cLiteralsLiteralParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueAINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntLiteral:
		//	value=AINT;
		public ParserRule getRule() { return rule; }

		//value=AINT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//AINT
		public RuleCall getValueAINTTerminalRuleCall_0() { return cValueAINTTerminalRuleCall_0; }
	}

	public class FloatLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FloatLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueFLOATTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//FloatLiteral:
		//	value=FLOAT;
		public ParserRule getRule() { return rule; }

		//value=FLOAT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//FLOAT
		public RuleCall getValueFLOATTerminalRuleCall_0() { return cValueFLOATTerminalRuleCall_0; }
	}

	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueXBooleanLiteralParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanLiteral:
		//	value=XBooleanLiteral;
		public ParserRule getRule() { return rule; }

		//value=XBooleanLiteral
		public Assignment getValueAssignment() { return cValueAssignment; }

		//XBooleanLiteral
		public RuleCall getValueXBooleanLiteralParserRuleCall_0() { return cValueXBooleanLiteralParserRuleCall_0; }
	}

	public class LogicOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cANDAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cANDAmpersandKeyword_0_0 = (Keyword)cANDAssignment_0.eContents().get(0);
		private final Assignment cORAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cORVerticalLineKeyword_1_0 = (Keyword)cORAssignment_1.eContents().get(0);
		
		//// -----------------------------------
		//// Terminals
		//LogicOperator:
		//	AND="&" | OR="|";
		public ParserRule getRule() { return rule; }

		//AND="&" | OR="|"
		public Alternatives getAlternatives() { return cAlternatives; }

		//AND="&"
		public Assignment getANDAssignment_0() { return cANDAssignment_0; }

		//"&"
		public Keyword getANDAmpersandKeyword_0_0() { return cANDAmpersandKeyword_0_0; }

		//OR="|"
		public Assignment getORAssignment_1() { return cORAssignment_1; }

		//"|"
		public Keyword getORVerticalLineKeyword_1_0() { return cORVerticalLineKeyword_1_0; }
	}

	public class ComparatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comparator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEQAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cEQEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEQAssignment_0.eContents().get(0);
		private final Assignment cNEAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cNEExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNEAssignment_1.eContents().get(0);
		private final Assignment cGRAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cGRGreaterThanSignKeyword_2_0 = (Keyword)cGRAssignment_2.eContents().get(0);
		private final Assignment cLWAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cLWLessThanSignKeyword_3_0 = (Keyword)cLWAssignment_3.eContents().get(0);
		private final Assignment cGEAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cGEGreaterThanSignEqualsSignKeyword_4_0 = (Keyword)cGEAssignment_4.eContents().get(0);
		private final Assignment cLEAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cLELessThanSignEqualsSignKeyword_5_0 = (Keyword)cLEAssignment_5.eContents().get(0);
		private final Assignment cLIKEAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final Keyword cLIKETildeKeyword_6_0 = (Keyword)cLIKEAssignment_6.eContents().get(0);
		
		//Comparator:
		//	EQ="==" | NE="!=" | GR=">" | LW="<" | GE=">=" | LE="<=" | LIKE="~";
		public ParserRule getRule() { return rule; }

		//EQ="==" | NE="!=" | GR=">" | LW="<" | GE=">=" | LE="<=" | LIKE="~"
		public Alternatives getAlternatives() { return cAlternatives; }

		//EQ="=="
		public Assignment getEQAssignment_0() { return cEQAssignment_0; }

		//"=="
		public Keyword getEQEqualsSignEqualsSignKeyword_0_0() { return cEQEqualsSignEqualsSignKeyword_0_0; }

		//NE="!="
		public Assignment getNEAssignment_1() { return cNEAssignment_1; }

		//"!="
		public Keyword getNEExclamationMarkEqualsSignKeyword_1_0() { return cNEExclamationMarkEqualsSignKeyword_1_0; }

		//GR=">"
		public Assignment getGRAssignment_2() { return cGRAssignment_2; }

		//">"
		public Keyword getGRGreaterThanSignKeyword_2_0() { return cGRGreaterThanSignKeyword_2_0; }

		//LW="<"
		public Assignment getLWAssignment_3() { return cLWAssignment_3; }

		//"<"
		public Keyword getLWLessThanSignKeyword_3_0() { return cLWLessThanSignKeyword_3_0; }

		//GE=">="
		public Assignment getGEAssignment_4() { return cGEAssignment_4; }

		//">="
		public Keyword getGEGreaterThanSignEqualsSignKeyword_4_0() { return cGEGreaterThanSignEqualsSignKeyword_4_0; }

		//LE="<="
		public Assignment getLEAssignment_5() { return cLEAssignment_5; }

		//"<="
		public Keyword getLELessThanSignEqualsSignKeyword_5_0() { return cLELessThanSignEqualsSignKeyword_5_0; }

		//LIKE="~"
		public Assignment getLIKEAssignment_6() { return cLIKEAssignment_6; }

		//"~"
		public Keyword getLIKETildeKeyword_6_0() { return cLIKETildeKeyword_6_0; }
	}
	
	
	private final ModelElements pModel;
	private final MetamodelSequenceElements pMetamodelSequence;
	private final MetamodelElements pMetamodel;
	private final RegisteredPackageElements pRegisteredPackage;
	private final ConnectionElements pConnection;
	private final WeaverElements pWeaver;
	private final AspectModelElements pAspectModel;
	private final GeneratorElements pGenerator;
	private final SourceModelNodeSelectorElements pSourceModelNodeSelector;
	private final TargetModelNodeTypeElements pTargetModelNodeType;
	private final ModelNodeTypeElements pModelNodeType;
	private final NodePropertyElements pNodeProperty;
	private final ConstraintExpressionElements pConstraintExpression;
	private final CompareExpressionElements pCompareExpression;
	private final BasicConstraintElements pBasicConstraint;
	private final ParenthesisConstraintElements pParenthesisConstraint;
	private final OperandElements pOperand;
	private final TraceModelElements pTraceModel;
	private final NodeSetRelationElements pNodeSetRelation;
	private final NodeTypeElements pNodeType;
	private final LiteralElements pLiteral;
	private final ArrayLiteralElements pArrayLiteral;
	private final StringLiteralElements pStringLiteral;
	private final IntLiteralElements pIntLiteral;
	private final FloatLiteralElements pFloatLiteral;
	private final BooleanLiteralElements pBooleanLiteral;
	private final LogicOperatorElements pLogicOperator;
	private final ComparatorElements pComparator;
	private final TerminalRule tDIGIT;
	private final TerminalRule tAINT;
	private final TerminalRule tFLOAT;
	
	private final Grammar grammar;

	private final XbaseGrammarAccess gaXbase;

	@Inject
	public ArchitectureGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.pModel = new ModelElements();
		this.pMetamodelSequence = new MetamodelSequenceElements();
		this.pMetamodel = new MetamodelElements();
		this.pRegisteredPackage = new RegisteredPackageElements();
		this.pConnection = new ConnectionElements();
		this.pWeaver = new WeaverElements();
		this.pAspectModel = new AspectModelElements();
		this.pGenerator = new GeneratorElements();
		this.pSourceModelNodeSelector = new SourceModelNodeSelectorElements();
		this.pTargetModelNodeType = new TargetModelNodeTypeElements();
		this.pModelNodeType = new ModelNodeTypeElements();
		this.pNodeProperty = new NodePropertyElements();
		this.pConstraintExpression = new ConstraintExpressionElements();
		this.pCompareExpression = new CompareExpressionElements();
		this.pBasicConstraint = new BasicConstraintElements();
		this.pParenthesisConstraint = new ParenthesisConstraintElements();
		this.pOperand = new OperandElements();
		this.pTraceModel = new TraceModelElements();
		this.pNodeSetRelation = new NodeSetRelationElements();
		this.pNodeType = new NodeTypeElements();
		this.pLiteral = new LiteralElements();
		this.pArrayLiteral = new ArrayLiteralElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pIntLiteral = new IntLiteralElements();
		this.pFloatLiteral = new FloatLiteralElements();
		this.pBooleanLiteral = new BooleanLiteralElements();
		this.pLogicOperator = new LogicOperatorElements();
		this.pComparator = new ComparatorElements();
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DIGIT");
		this.tAINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "AINT");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.se.geco.architecture.Architecture".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//Model:
	//	"package" name=QualifiedName importSection=XImportSection? registeredPackages+=RegisteredPackage+
	//	(conections+=Connection // prerequisites
	//	// handle results
	//	| metamodels+=MetamodelSequence)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//MetamodelSequence:
	//	"model" type=ModelNodeType metamodels+=Metamodel ("," metamodels+=Metamodel)*;
	public MetamodelSequenceElements getMetamodelSequenceAccess() {
		return pMetamodelSequence;
	}
	
	public ParserRule getMetamodelSequenceRule() {
		return getMetamodelSequenceAccess().getRule();
	}

	//Metamodel:
	//	name=ValidID;
	public MetamodelElements getMetamodelAccess() {
		return pMetamodel;
	}
	
	public ParserRule getMetamodelRule() {
		return getMetamodelAccess().getRule();
	}

	//RegisteredPackage:
	//	"register" name=ValidID (modelPackage=[ecore::EPackage|STRING] | isText?="text" extension=STRING);
	public RegisteredPackageElements getRegisteredPackageAccess() {
		return pRegisteredPackage;
	}
	
	public ParserRule getRegisteredPackageRule() {
		return getRegisteredPackageAccess().getRule();
	}

	//Connection:
	//	Generator | Weaver;
	public ConnectionElements getConnectionAccess() {
		return pConnection;
	}
	
	public ParserRule getConnectionRule() {
		return getConnectionAccess().getRule();
	}

	//Weaver:
	//	"weave" weaver=JvmTypeReference sourceModel=SourceModelNodeSelector aspectModel=AspectModel ("=>"
	//	targetModel=TargetModelNodeType)?;
	public WeaverElements getWeaverAccess() {
		return pWeaver;
	}
	
	public ParserRule getWeaverRule() {
		return getWeaverAccess().getRule();
	}

	//AspectModel:
	//	":" TargetModelNodeType | Generator;
	public AspectModelElements getAspectModelAccess() {
		return pAspectModel;
	}
	
	public ParserRule getAspectModelRule() {
		return getAspectModelAccess().getRule();
	}

	//Generator:
	//	"generate" generator=JvmTypeReference sourceModel=SourceModelNodeSelector targetModel=TargetModelNodeType ("->"
	//	writeTraceModel=TraceModel)? ("<-" readTraceModels+=[TraceModel|ValidID] (","
	//	readTraceModels+=[TraceModel|ValidID])*)?;
	public GeneratorElements getGeneratorAccess() {
		return pGenerator;
	}
	
	public ParserRule getGeneratorRule() {
		return getGeneratorAccess().getRule();
	}

	//SourceModelNodeSelector:
	//	reference=[Metamodel|ValidID] ("/" property=NodeProperty)? | {SourceModelNodeSelector} "null";
	public SourceModelNodeSelectorElements getSourceModelNodeSelectorAccess() {
		return pSourceModelNodeSelector;
	}
	
	public ParserRule getSourceModelNodeSelectorRule() {
		return getSourceModelNodeSelectorAccess().getRule();
	}

	//TargetModelNodeType:
	//	{TargetModelNodeType} reference=[Metamodel|ValidID]? multiply?="*"?;
	public TargetModelNodeTypeElements getTargetModelNodeTypeAccess() {
		return pTargetModelNodeType;
	}
	
	public ParserRule getTargetModelNodeTypeRule() {
		return getTargetModelNodeTypeAccess().getRule();
	}

	//ModelNodeType:
	//	target=[RegisteredPackage|ValidID] "/" type=[ecore::EClass|ValidID] ("/" property=NodeProperty)?;
	public ModelNodeTypeElements getModelNodeTypeAccess() {
		return pModelNodeType;
	}
	
	public ParserRule getModelNodeTypeRule() {
		return getModelNodeTypeAccess().getRule();
	}

	//NodeProperty:
	//	property=[ecore::EReference|ValidID] ("[" constraint=ConstraintExpression "]")? ("/" subProperty=NodeProperty)?;
	public NodePropertyElements getNodePropertyAccess() {
		return pNodeProperty;
	}
	
	public ParserRule getNodePropertyRule() {
		return getNodePropertyAccess().getRule();
	}

	//ConstraintExpression:
	//	CompareExpression (=> ({ConstraintExpression.left=current} operator=LogicOperator) right=ConstraintExpression)?;
	public ConstraintExpressionElements getConstraintExpressionAccess() {
		return pConstraintExpression;
	}
	
	public ParserRule getConstraintExpressionRule() {
		return getConstraintExpressionAccess().getRule();
	}

	//CompareExpression returns ConstraintExpression:
	//	BasicConstraint (=> ({ConstraintExpression.left=current} operator=Comparator) right=BasicConstraint)?;
	public CompareExpressionElements getCompareExpressionAccess() {
		return pCompareExpression;
	}
	
	public ParserRule getCompareExpressionRule() {
		return getCompareExpressionAccess().getRule();
	}

	//BasicConstraint returns ConstraintExpression:
	//	ParenthesisConstraint | Operand;
	public BasicConstraintElements getBasicConstraintAccess() {
		return pBasicConstraint;
	}
	
	public ParserRule getBasicConstraintRule() {
		return getBasicConstraintAccess().getRule();
	}

	//ParenthesisConstraint returns ConstraintExpression:
	//	"(" constraint=ConstraintExpression ")";
	public ParenthesisConstraintElements getParenthesisConstraintAccess() {
		return pParenthesisConstraint;
	}
	
	public ParserRule getParenthesisConstraintRule() {
		return getParenthesisConstraintAccess().getRule();
	}

	//Operand:
	//	Literal | NodeProperty;
	public OperandElements getOperandAccess() {
		return pOperand;
	}
	
	public ParserRule getOperandRule() {
		return getOperandAccess().getRule();
	}

	//TraceModel:
	//	name=ValidID "<" nodeSetRelations+=NodeSetRelation+ ">";
	public TraceModelElements getTraceModelAccess() {
		return pTraceModel;
	}
	
	public ParserRule getTraceModelRule() {
		return getTraceModelAccess().getRule();
	}

	//NodeSetRelation:
	//	"(" sourceNodes+=NodeType ("," sourceNodes+=NodeType)* ":" targetNodes+=NodeType ("," targetNodes+=NodeType)* ")";
	public NodeSetRelationElements getNodeSetRelationAccess() {
		return pNodeSetRelation;
	}
	
	public ParserRule getNodeSetRelationRule() {
		return getNodeSetRelationAccess().getRule();
	}

	//NodeType:
	//	eclass=[ecore::EClass|ValidID];
	public NodeTypeElements getNodeTypeAccess() {
		return pNodeType;
	}
	
	public ParserRule getNodeTypeRule() {
		return getNodeTypeAccess().getRule();
	}

	//// -----------------------------------
	//// Literal
	//Literal:
	//	StringLiteral | IntLiteral | FloatLiteral | BooleanLiteral | ArrayLiteral;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//ArrayLiteral:
	//	"{" literals+=Literal ("," literals+=Literal)* "}";
	public ArrayLiteralElements getArrayLiteralAccess() {
		return pArrayLiteral;
	}
	
	public ParserRule getArrayLiteralRule() {
		return getArrayLiteralAccess().getRule();
	}

	//StringLiteral:
	//	value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//IntLiteral:
	//	value=AINT;
	public IntLiteralElements getIntLiteralAccess() {
		return pIntLiteral;
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}

	//FloatLiteral:
	//	value=FLOAT;
	public FloatLiteralElements getFloatLiteralAccess() {
		return pFloatLiteral;
	}
	
	public ParserRule getFloatLiteralRule() {
		return getFloatLiteralAccess().getRule();
	}

	//BooleanLiteral:
	//	value=XBooleanLiteral;
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return pBooleanLiteral;
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//// -----------------------------------
	//// Terminals
	//LogicOperator:
	//	AND="&" | OR="|";
	public LogicOperatorElements getLogicOperatorAccess() {
		return pLogicOperator;
	}
	
	public ParserRule getLogicOperatorRule() {
		return getLogicOperatorAccess().getRule();
	}

	//Comparator:
	//	EQ="==" | NE="!=" | GR=">" | LW="<" | GE=">=" | LE="<=" | LIKE="~";
	public ComparatorElements getComparatorAccess() {
		return pComparator;
	}
	
	public ParserRule getComparatorRule() {
		return getComparatorAccess().getRule();
	}

	//// terminals
	//terminal fragment DIGIT:
	//	"0".."9";
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	} 

	//// redefine INT terminal to allow negative numbers
	//terminal AINT returns ecore::EInt:
	//	"-"? DIGIT+;
	public TerminalRule getAINTRule() {
		return tAINT;
	} 

	//// make sure the Float rule does not shadow the INT rule
	//terminal FLOAT returns ecore::EFloatObject:
	//	"-"? DIGIT+ ("." DIGIT*) (("e" | "E") ("+" | "-")? DIGIT+)? "f"? | "-"? DIGIT+ "f";
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	} 

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<" "=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=XExpression ")" | =>
	//	(declaredParam=JvmFormalParameter ":")? switch=XExpression) "{" cases+=XCasePart* ("default" ":" default=XExpression)?
	//	"}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ("case" case=XExpression)? (":" then=XExpression | fallThrough?=",");
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	=> ({XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":") forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression returns XExpression:
	//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
	//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? (=>
	//	explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression:
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)* ">"
	//	(=> ({JvmInnerTypeReference.outer=current} ".") type=[JvmType|ValidID] ("<" arguments+=JvmArgumentTypeReference (","
	//	arguments+=JvmArgumentTypeReference)* ">")?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded returns JvmLowerBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXbase.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?="*" | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXbase.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\""))* "\""? | "\'" ("\\" .
	//	/ * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\'"))* "\'"?;
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
