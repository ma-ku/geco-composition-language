/*
 * generated by Xtext 2.10.0
 */
package de.cau.cs.se.geco.architecture.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ArchitectureGrammarAccess extends AbstractGrammarElementFinder {
	
	public class GecoModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.GecoModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsImportParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Assignment cRegisteredRootClassAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRegisteredRootClassRegisteredRootClassParserRuleCall_3_0 = (RuleCall)cRegisteredRootClassAssignment_3.eContents().get(0);
		private final Assignment cModelsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cModelsModelSequenceParserRuleCall_4_0 = (RuleCall)cModelsAssignment_4.eContents().get(0);
		private final Assignment cFragmentsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFragmentsFragmentParserRuleCall_5_0 = (RuleCall)cFragmentsAssignment_5.eContents().get(0);
		
		//GecoModel:
		//	'package' name=QualifiedName
		//	imports+=Import*
		//	registeredRootClass+=RegisteredRootClass*
		//	models+=ModelSequence*
		//	fragments+=Fragment*;
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=QualifiedName imports+=Import* registeredRootClass+=RegisteredRootClass* models+=ModelSequence*
		//fragments+=Fragment*
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_2_0() { return cImportsImportParserRuleCall_2_0; }
		
		//registeredRootClass+=RegisteredRootClass*
		public Assignment getRegisteredRootClassAssignment_3() { return cRegisteredRootClassAssignment_3; }
		
		//RegisteredRootClass
		public RuleCall getRegisteredRootClassRegisteredRootClassParserRuleCall_3_0() { return cRegisteredRootClassRegisteredRootClassParserRuleCall_3_0; }
		
		//models+=ModelSequence*
		public Assignment getModelsAssignment_4() { return cModelsAssignment_4; }
		
		//ModelSequence
		public RuleCall getModelsModelSequenceParserRuleCall_4_0() { return cModelsModelSequenceParserRuleCall_4_0; }
		
		//fragments+=Fragment*
		public Assignment getFragmentsAssignment_5() { return cFragmentsAssignment_5; }
		
		//Fragment
		public RuleCall getFragmentsFragmentParserRuleCall_5_0() { return cFragmentsFragmentParserRuleCall_5_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cImportedNamespaceJvmTypeCrossReference_1_0 = (CrossReference)cImportedNamespaceAssignment_1.eContents().get(0);
		private final RuleCall cImportedNamespaceJvmTypeQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cImportedNamespaceJvmTypeCrossReference_1_0.eContents().get(1);
		
		//Import:
		//	'import' importedNamespace=[types::JvmType|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=[types::JvmType|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=[types::JvmType|QualifiedName]
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//[types::JvmType|QualifiedName]
		public CrossReference getImportedNamespaceJvmTypeCrossReference_1_0() { return cImportedNamespaceJvmTypeCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getImportedNamespaceJvmTypeQualifiedNameParserRuleCall_1_0_1() { return cImportedNamespaceJvmTypeQualifiedNameParserRuleCall_1_0_1; }
	}
	public class RegisteredRootClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.RegisteredRootClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRegisterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cImportedNamespaceAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cImportedNamespaceJvmTypeCrossReference_2_0_0 = (CrossReference)cImportedNamespaceAssignment_2_0.eContents().get(0);
		private final RuleCall cImportedNamespaceJvmTypeQualifiedNameParserRuleCall_2_0_0_1 = (RuleCall)cImportedNamespaceJvmTypeCrossReference_2_0_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cIsTextAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final Keyword cIsTextTextKeyword_2_1_0_0 = (Keyword)cIsTextAssignment_2_1_0.eContents().get(0);
		private final Assignment cExtensionAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cExtensionSTRINGTerminalRuleCall_2_1_1_0 = (RuleCall)cExtensionAssignment_2_1_1.eContents().get(0);
		
		//RegisteredRootClass:
		//	'register' name=ID (importedNamespace=[types::JvmType|QualifiedName] | isText?='text' extension=STRING);
		@Override public ParserRule getRule() { return rule; }
		
		//'register' name=ID (importedNamespace=[types::JvmType|QualifiedName] | isText?='text' extension=STRING)
		public Group getGroup() { return cGroup; }
		
		//'register'
		public Keyword getRegisterKeyword_0() { return cRegisterKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(importedNamespace=[types::JvmType|QualifiedName] | isText?='text' extension=STRING)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//importedNamespace=[types::JvmType|QualifiedName]
		public Assignment getImportedNamespaceAssignment_2_0() { return cImportedNamespaceAssignment_2_0; }
		
		//[types::JvmType|QualifiedName]
		public CrossReference getImportedNamespaceJvmTypeCrossReference_2_0_0() { return cImportedNamespaceJvmTypeCrossReference_2_0_0; }
		
		//QualifiedName
		public RuleCall getImportedNamespaceJvmTypeQualifiedNameParserRuleCall_2_0_0_1() { return cImportedNamespaceJvmTypeQualifiedNameParserRuleCall_2_0_0_1; }
		
		//isText?='text' extension=STRING
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//isText?='text'
		public Assignment getIsTextAssignment_2_1_0() { return cIsTextAssignment_2_1_0; }
		
		//'text'
		public Keyword getIsTextTextKeyword_2_1_0_0() { return cIsTextTextKeyword_2_1_0_0; }
		
		//extension=STRING
		public Assignment getExtensionAssignment_2_1_1() { return cExtensionAssignment_2_1_1; }
		
		//STRING
		public RuleCall getExtensionSTRINGTerminalRuleCall_2_1_1_0() { return cExtensionSTRINGTerminalRuleCall_2_1_1_0; }
	}
	public class ModelSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.ModelSequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModifierModelModifierEnumRuleCall_1_0 = (RuleCall)cModifierAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeModelTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cModelsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModelsModelParserRuleCall_3_0 = (RuleCall)cModelsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cModelsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cModelsModelParserRuleCall_4_1_0 = (RuleCall)cModelsAssignment_4_1.eContents().get(0);
		
		//ModelSequence:
		//	'model' modifier=ModelModifier type=ModelType models+=Model (',' models+=Model)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'model' modifier=ModelModifier type=ModelType models+=Model (',' models+=Model)*
		public Group getGroup() { return cGroup; }
		
		//'model'
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }
		
		//modifier=ModelModifier
		public Assignment getModifierAssignment_1() { return cModifierAssignment_1; }
		
		//ModelModifier
		public RuleCall getModifierModelModifierEnumRuleCall_1_0() { return cModifierModelModifierEnumRuleCall_1_0; }
		
		//type=ModelType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//ModelType
		public RuleCall getTypeModelTypeParserRuleCall_2_0() { return cTypeModelTypeParserRuleCall_2_0; }
		
		//models+=Model
		public Assignment getModelsAssignment_3() { return cModelsAssignment_3; }
		
		//Model
		public RuleCall getModelsModelParserRuleCall_3_0() { return cModelsModelParserRuleCall_3_0; }
		
		//(',' models+=Model)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//models+=Model
		public Assignment getModelsAssignment_4_1() { return cModelsAssignment_4_1; }
		
		//Model
		public RuleCall getModelsModelParserRuleCall_4_1_0() { return cModelsModelParserRuleCall_4_1_0; }
	}
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.Model");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Model:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class FragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.Fragment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGeneratorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWeaverParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Fragment:
		//	Generator | Weaver;
		@Override public ParserRule getRule() { return rule; }
		
		//Generator | Weaver
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Generator
		public RuleCall getGeneratorParserRuleCall_0() { return cGeneratorParserRuleCall_0; }
		
		//Weaver
		public RuleCall getWeaverParserRuleCall_1() { return cWeaverParserRuleCall_1; }
	}
	public class WeaverElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.Weaver");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWeaveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferenceJvmTypeCrossReference_1_0 = (CrossReference)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cReferenceJvmTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cReferenceJvmTypeCrossReference_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cSourceModelAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cSourceModelSourceModelSelectorParserRuleCall_2_0_0 = (RuleCall)cSourceModelAssignment_2_0.eContents().get(0);
		private final Keyword cLinkKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cAspectModelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAspectModelAspectModelParserRuleCall_3_0 = (RuleCall)cAspectModelAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignGreaterThanSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTargetModelAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTargetModelTargetModelParserRuleCall_4_1_0 = (RuleCall)cTargetModelAssignment_4_1.eContents().get(0);
		
		//Weaver:
		//	'weave' reference=[types::JvmType] (sourceModel=SourceModelSelector | 'link') aspectModel=AspectModel ('=>'
		//	targetModel=TargetModel)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'weave' reference=[types::JvmType] (sourceModel=SourceModelSelector | 'link') aspectModel=AspectModel ('=>'
		//targetModel=TargetModel)?
		public Group getGroup() { return cGroup; }
		
		//'weave'
		public Keyword getWeaveKeyword_0() { return cWeaveKeyword_0; }
		
		//reference=[types::JvmType]
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }
		
		//[types::JvmType]
		public CrossReference getReferenceJvmTypeCrossReference_1_0() { return cReferenceJvmTypeCrossReference_1_0; }
		
		//ID
		public RuleCall getReferenceJvmTypeIDTerminalRuleCall_1_0_1() { return cReferenceJvmTypeIDTerminalRuleCall_1_0_1; }
		
		//(sourceModel=SourceModelSelector | 'link')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//sourceModel=SourceModelSelector
		public Assignment getSourceModelAssignment_2_0() { return cSourceModelAssignment_2_0; }
		
		//SourceModelSelector
		public RuleCall getSourceModelSourceModelSelectorParserRuleCall_2_0_0() { return cSourceModelSourceModelSelectorParserRuleCall_2_0_0; }
		
		//'link'
		public Keyword getLinkKeyword_2_1() { return cLinkKeyword_2_1; }
		
		//aspectModel=AspectModel
		public Assignment getAspectModelAssignment_3() { return cAspectModelAssignment_3; }
		
		//AspectModel
		public RuleCall getAspectModelAspectModelParserRuleCall_3_0() { return cAspectModelAspectModelParserRuleCall_3_0; }
		
		//('=>' targetModel=TargetModel)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_4_0() { return cEqualsSignGreaterThanSignKeyword_4_0; }
		
		//targetModel=TargetModel
		public Assignment getTargetModelAssignment_4_1() { return cTargetModelAssignment_4_1; }
		
		//TargetModel
		public RuleCall getTargetModelTargetModelParserRuleCall_4_1_0() { return cTargetModelTargetModelParserRuleCall_4_1_0; }
	}
	public class AspectModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.AspectModel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCombinedModelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSeparateModelsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AspectModel:
		//	CombinedModel | SeparateModels;
		@Override public ParserRule getRule() { return rule; }
		
		//CombinedModel | SeparateModels
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CombinedModel
		public RuleCall getCombinedModelParserRuleCall_0() { return cCombinedModelParserRuleCall_0; }
		
		//SeparateModels
		public RuleCall getSeparateModelsParserRuleCall_1() { return cSeparateModelsParserRuleCall_1; }
	}
	public class SeparateModelsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.SeparateModels");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPointcutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPointcutAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPointcutTargetModelParserRuleCall_1_0 = (RuleCall)cPointcutAssignment_1.eContents().get(0);
		private final Keyword cAdviceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAdviceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAdviceCombinedModelParserRuleCall_3_0 = (RuleCall)cAdviceAssignment_3.eContents().get(0);
		
		//SeparateModels:
		//	'pointcut' pointcut=TargetModel 'advice' advice=CombinedModel;
		@Override public ParserRule getRule() { return rule; }
		
		//'pointcut' pointcut=TargetModel 'advice' advice=CombinedModel
		public Group getGroup() { return cGroup; }
		
		//'pointcut'
		public Keyword getPointcutKeyword_0() { return cPointcutKeyword_0; }
		
		//pointcut=TargetModel
		public Assignment getPointcutAssignment_1() { return cPointcutAssignment_1; }
		
		//TargetModel
		public RuleCall getPointcutTargetModelParserRuleCall_1_0() { return cPointcutTargetModelParserRuleCall_1_0; }
		
		//'advice'
		public Keyword getAdviceKeyword_2() { return cAdviceKeyword_2; }
		
		//advice=CombinedModel
		public Assignment getAdviceAssignment_3() { return cAdviceAssignment_3; }
		
		//CombinedModel
		public RuleCall getAdviceCombinedModelParserRuleCall_3_0() { return cAdviceCombinedModelParserRuleCall_3_0; }
	}
	public class CombinedModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.CombinedModel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTargetModelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGeneratorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CombinedModel:
		//	TargetModel | Generator;
		@Override public ParserRule getRule() { return rule; }
		
		//TargetModel | Generator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TargetModel
		public RuleCall getTargetModelParserRuleCall_0() { return cTargetModelParserRuleCall_0; }
		
		//Generator
		public RuleCall getGeneratorParserRuleCall_1() { return cGeneratorParserRuleCall_1; }
	}
	public class GeneratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.Generator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGenerateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferenceJvmTypeCrossReference_1_0 = (CrossReference)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cReferenceJvmTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cReferenceJvmTypeCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSourceAuxModelsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSourceAuxModelsSourceModelSelectorParserRuleCall_2_1_0 = (RuleCall)cSourceAuxModelsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cSourceAuxModelsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cSourceAuxModelsSourceModelSelectorParserRuleCall_2_2_1_0 = (RuleCall)cSourceAuxModelsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cSourceKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSourceModelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSourceModelSourceModelSelectorParserRuleCall_4_0 = (RuleCall)cSourceModelAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cTargetKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTargetModelAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTargetModelTargetModelParserRuleCall_5_1_0 = (RuleCall)cTargetModelAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cTraceKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cOutKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cTargetTraceModelAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cTargetTraceModelTargetTraceModelParserRuleCall_6_1_1_0 = (RuleCall)cTargetTraceModelAssignment_6_1_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cInKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cSourceTraceModelsAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cSourceTraceModelsTraceModelReferenceParserRuleCall_6_2_1_0 = (RuleCall)cSourceTraceModelsAssignment_6_2_1.eContents().get(0);
		private final Group cGroup_6_2_2 = (Group)cGroup_6_2.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_2_0 = (Keyword)cGroup_6_2_2.eContents().get(0);
		private final Assignment cSourceTraceModelsAssignment_6_2_2_1 = (Assignment)cGroup_6_2_2.eContents().get(1);
		private final RuleCall cSourceTraceModelsTraceModelReferenceParserRuleCall_6_2_2_1_0 = (RuleCall)cSourceTraceModelsAssignment_6_2_2_1.eContents().get(0);
		
		//Generator:
		//	'generate' reference=[types::JvmType] ('(' sourceAuxModels+=SourceModelSelector (','
		//	sourceAuxModels+=SourceModelSelector)* ')')?
		//	'source' sourceModel=SourceModelSelector ('target' targetModel=TargetModel)? ('trace' ('out'
		//	targetTraceModel=TargetTraceModel)? ('in' sourceTraceModels+=TraceModelReference (','
		//	sourceTraceModels+=TraceModelReference)*)?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'generate' reference=[types::JvmType] ('(' sourceAuxModels+=SourceModelSelector (','
		//sourceAuxModels+=SourceModelSelector)* ')')? 'source' sourceModel=SourceModelSelector ('target'
		//targetModel=TargetModel)? ('trace' ('out' targetTraceModel=TargetTraceModel)? ('in'
		//sourceTraceModels+=TraceModelReference (',' sourceTraceModels+=TraceModelReference)*)?)?
		public Group getGroup() { return cGroup; }
		
		//'generate'
		public Keyword getGenerateKeyword_0() { return cGenerateKeyword_0; }
		
		//reference=[types::JvmType]
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }
		
		//[types::JvmType]
		public CrossReference getReferenceJvmTypeCrossReference_1_0() { return cReferenceJvmTypeCrossReference_1_0; }
		
		//ID
		public RuleCall getReferenceJvmTypeIDTerminalRuleCall_1_0_1() { return cReferenceJvmTypeIDTerminalRuleCall_1_0_1; }
		
		//('(' sourceAuxModels+=SourceModelSelector (',' sourceAuxModels+=SourceModelSelector)* ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//sourceAuxModels+=SourceModelSelector
		public Assignment getSourceAuxModelsAssignment_2_1() { return cSourceAuxModelsAssignment_2_1; }
		
		//SourceModelSelector
		public RuleCall getSourceAuxModelsSourceModelSelectorParserRuleCall_2_1_0() { return cSourceAuxModelsSourceModelSelectorParserRuleCall_2_1_0; }
		
		//(',' sourceAuxModels+=SourceModelSelector)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//sourceAuxModels+=SourceModelSelector
		public Assignment getSourceAuxModelsAssignment_2_2_1() { return cSourceAuxModelsAssignment_2_2_1; }
		
		//SourceModelSelector
		public RuleCall getSourceAuxModelsSourceModelSelectorParserRuleCall_2_2_1_0() { return cSourceAuxModelsSourceModelSelectorParserRuleCall_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//'source'
		public Keyword getSourceKeyword_3() { return cSourceKeyword_3; }
		
		//sourceModel=SourceModelSelector
		public Assignment getSourceModelAssignment_4() { return cSourceModelAssignment_4; }
		
		//SourceModelSelector
		public RuleCall getSourceModelSourceModelSelectorParserRuleCall_4_0() { return cSourceModelSourceModelSelectorParserRuleCall_4_0; }
		
		//('target' targetModel=TargetModel)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'target'
		public Keyword getTargetKeyword_5_0() { return cTargetKeyword_5_0; }
		
		//targetModel=TargetModel
		public Assignment getTargetModelAssignment_5_1() { return cTargetModelAssignment_5_1; }
		
		//TargetModel
		public RuleCall getTargetModelTargetModelParserRuleCall_5_1_0() { return cTargetModelTargetModelParserRuleCall_5_1_0; }
		
		//('trace' ('out' targetTraceModel=TargetTraceModel)? ('in' sourceTraceModels+=TraceModelReference (','
		//sourceTraceModels+=TraceModelReference)*)?)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'trace'
		public Keyword getTraceKeyword_6_0() { return cTraceKeyword_6_0; }
		
		//('out' targetTraceModel=TargetTraceModel)?
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//'out'
		public Keyword getOutKeyword_6_1_0() { return cOutKeyword_6_1_0; }
		
		//targetTraceModel=TargetTraceModel
		public Assignment getTargetTraceModelAssignment_6_1_1() { return cTargetTraceModelAssignment_6_1_1; }
		
		//TargetTraceModel
		public RuleCall getTargetTraceModelTargetTraceModelParserRuleCall_6_1_1_0() { return cTargetTraceModelTargetTraceModelParserRuleCall_6_1_1_0; }
		
		//('in' sourceTraceModels+=TraceModelReference (',' sourceTraceModels+=TraceModelReference)*)?
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//'in'
		public Keyword getInKeyword_6_2_0() { return cInKeyword_6_2_0; }
		
		//sourceTraceModels+=TraceModelReference
		public Assignment getSourceTraceModelsAssignment_6_2_1() { return cSourceTraceModelsAssignment_6_2_1; }
		
		//TraceModelReference
		public RuleCall getSourceTraceModelsTraceModelReferenceParserRuleCall_6_2_1_0() { return cSourceTraceModelsTraceModelReferenceParserRuleCall_6_2_1_0; }
		
		//(',' sourceTraceModels+=TraceModelReference)*
		public Group getGroup_6_2_2() { return cGroup_6_2_2; }
		
		//','
		public Keyword getCommaKeyword_6_2_2_0() { return cCommaKeyword_6_2_2_0; }
		
		//sourceTraceModels+=TraceModelReference
		public Assignment getSourceTraceModelsAssignment_6_2_2_1() { return cSourceTraceModelsAssignment_6_2_2_1; }
		
		//TraceModelReference
		public RuleCall getSourceTraceModelsTraceModelReferenceParserRuleCall_6_2_2_1_0() { return cSourceTraceModelsTraceModelReferenceParserRuleCall_6_2_2_1_0; }
	}
	public class SourceModelSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.SourceModelSelector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cReferenceAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cReferenceModelCrossReference_0_0_0 = (CrossReference)cReferenceAssignment_0_0.eContents().get(0);
		private final RuleCall cReferenceModelIDTerminalRuleCall_0_0_0_1 = (RuleCall)cReferenceModelCrossReference_0_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cConstraintAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cConstraintConstraintExpressionParserRuleCall_0_1_1_0 = (RuleCall)cConstraintAssignment_0_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cSolidusKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cPropertyAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cPropertyNodePropertyParserRuleCall_0_2_1_0 = (RuleCall)cPropertyAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSourceModelSelectorAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cNullKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//SourceModelSelector:
		//	reference=[Model] ('[' constraint=ConstraintExpression ']')? ('/' property=NodeProperty)? | {SourceModelSelector}
		//	'null';
		@Override public ParserRule getRule() { return rule; }
		
		//reference=[Model] ('[' constraint=ConstraintExpression ']')? ('/' property=NodeProperty)? | {SourceModelSelector} 'null'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//reference=[Model] ('[' constraint=ConstraintExpression ']')? ('/' property=NodeProperty)?
		public Group getGroup_0() { return cGroup_0; }
		
		//reference=[Model]
		public Assignment getReferenceAssignment_0_0() { return cReferenceAssignment_0_0; }
		
		//[Model]
		public CrossReference getReferenceModelCrossReference_0_0_0() { return cReferenceModelCrossReference_0_0_0; }
		
		//ID
		public RuleCall getReferenceModelIDTerminalRuleCall_0_0_0_1() { return cReferenceModelIDTerminalRuleCall_0_0_0_1; }
		
		//('[' constraint=ConstraintExpression ']')?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_1_0() { return cLeftSquareBracketKeyword_0_1_0; }
		
		//constraint=ConstraintExpression
		public Assignment getConstraintAssignment_0_1_1() { return cConstraintAssignment_0_1_1; }
		
		//ConstraintExpression
		public RuleCall getConstraintConstraintExpressionParserRuleCall_0_1_1_0() { return cConstraintConstraintExpressionParserRuleCall_0_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_1_2() { return cRightSquareBracketKeyword_0_1_2; }
		
		//('/' property=NodeProperty)?
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//'/'
		public Keyword getSolidusKeyword_0_2_0() { return cSolidusKeyword_0_2_0; }
		
		//property=NodeProperty
		public Assignment getPropertyAssignment_0_2_1() { return cPropertyAssignment_0_2_1; }
		
		//NodeProperty
		public RuleCall getPropertyNodePropertyParserRuleCall_0_2_1_0() { return cPropertyNodePropertyParserRuleCall_0_2_1_0; }
		
		//{SourceModelSelector} 'null'
		public Group getGroup_1() { return cGroup_1; }
		
		//{SourceModelSelector}
		public Action getSourceModelSelectorAction_1_0() { return cSourceModelSelectorAction_1_0; }
		
		//'null'
		public Keyword getNullKeyword_1_1() { return cNullKeyword_1_1; }
	}
	public class TargetModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.TargetModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTargetModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferenceModelCrossReference_1_0 = (CrossReference)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cReferenceModelIDTerminalRuleCall_1_0_1 = (RuleCall)cReferenceModelCrossReference_1_0.eContents().get(1);
		
		//TargetModel:
		//	{TargetModel} reference=[Model];
		@Override public ParserRule getRule() { return rule; }
		
		//{TargetModel} reference=[Model]
		public Group getGroup() { return cGroup; }
		
		//{TargetModel}
		public Action getTargetModelAction_0() { return cTargetModelAction_0; }
		
		//reference=[Model]
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }
		
		//[Model]
		public CrossReference getReferenceModelCrossReference_1_0() { return cReferenceModelCrossReference_1_0; }
		
		//ID
		public RuleCall getReferenceModelIDTerminalRuleCall_1_0_1() { return cReferenceModelIDTerminalRuleCall_1_0_1; }
	}
	public class ModelTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.ModelType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTargetRegisteredRootClassCrossReference_0_0 = (CrossReference)cTargetAssignment_0.eContents().get(0);
		private final RuleCall cTargetRegisteredRootClassIDTerminalRuleCall_0_0_1 = (RuleCall)cTargetRegisteredRootClassCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPropertyAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPropertyNodePropertyParserRuleCall_1_1_0 = (RuleCall)cPropertyAssignment_1_1.eContents().get(0);
		private final Assignment cCollectionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cCollectionLeftSquareBracketRightSquareBracketKeyword_2_0 = (Keyword)cCollectionAssignment_2.eContents().get(0);
		
		//ModelType:
		//	target=[RegisteredRootClass] ('/' property=NodeProperty)? collection?='[]'?;
		@Override public ParserRule getRule() { return rule; }
		
		//target=[RegisteredRootClass] ('/' property=NodeProperty)? collection?='[]'?
		public Group getGroup() { return cGroup; }
		
		//target=[RegisteredRootClass]
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }
		
		//[RegisteredRootClass]
		public CrossReference getTargetRegisteredRootClassCrossReference_0_0() { return cTargetRegisteredRootClassCrossReference_0_0; }
		
		//ID
		public RuleCall getTargetRegisteredRootClassIDTerminalRuleCall_0_0_1() { return cTargetRegisteredRootClassIDTerminalRuleCall_0_0_1; }
		
		//('/' property=NodeProperty)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0() { return cSolidusKeyword_1_0; }
		
		//property=NodeProperty
		public Assignment getPropertyAssignment_1_1() { return cPropertyAssignment_1_1; }
		
		//NodeProperty
		public RuleCall getPropertyNodePropertyParserRuleCall_1_1_0() { return cPropertyNodePropertyParserRuleCall_1_1_0; }
		
		//collection?='[]'?
		public Assignment getCollectionAssignment_2() { return cCollectionAssignment_2; }
		
		//'[]'
		public Keyword getCollectionLeftSquareBracketRightSquareBracketKeyword_2_0() { return cCollectionLeftSquareBracketRightSquareBracketKeyword_2_0; }
	}
	public class NodePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.NodeProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPropertyJvmMemberCrossReference_0_0 = (CrossReference)cPropertyAssignment_0.eContents().get(0);
		private final RuleCall cPropertyJvmMemberIDTerminalRuleCall_0_0_1 = (RuleCall)cPropertyJvmMemberCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConstraintAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConstraintConstraintExpressionParserRuleCall_1_1_0 = (RuleCall)cConstraintAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSolidusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSubPropertyAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSubPropertyNodePropertyParserRuleCall_2_1_0 = (RuleCall)cSubPropertyAssignment_2_1.eContents().get(0);
		
		//NodeProperty:
		//	property=[types::JvmMember] ('[' constraint=ConstraintExpression ']')? ('/' subProperty=NodeProperty)?;
		@Override public ParserRule getRule() { return rule; }
		
		//property=[types::JvmMember] ('[' constraint=ConstraintExpression ']')? ('/' subProperty=NodeProperty)?
		public Group getGroup() { return cGroup; }
		
		//property=[types::JvmMember]
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }
		
		//[types::JvmMember]
		public CrossReference getPropertyJvmMemberCrossReference_0_0() { return cPropertyJvmMemberCrossReference_0_0; }
		
		//ID
		public RuleCall getPropertyJvmMemberIDTerminalRuleCall_0_0_1() { return cPropertyJvmMemberIDTerminalRuleCall_0_0_1; }
		
		//('[' constraint=ConstraintExpression ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//constraint=ConstraintExpression
		public Assignment getConstraintAssignment_1_1() { return cConstraintAssignment_1_1; }
		
		//ConstraintExpression
		public RuleCall getConstraintConstraintExpressionParserRuleCall_1_1_0() { return cConstraintConstraintExpressionParserRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//('/' subProperty=NodeProperty)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'/'
		public Keyword getSolidusKeyword_2_0() { return cSolidusKeyword_2_0; }
		
		//subProperty=NodeProperty
		public Assignment getSubPropertyAssignment_2_1() { return cSubPropertyAssignment_2_1; }
		
		//NodeProperty
		public RuleCall getSubPropertyNodePropertyParserRuleCall_2_1_0() { return cSubPropertyNodePropertyParserRuleCall_2_1_0; }
	}
	public class ConstraintExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.ConstraintExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCompareExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cConstraintExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperatorLogicOperatorEnumRuleCall_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightConstraintExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//ConstraintExpression:
		//	CompareExpression (=> ({ConstraintExpression.left=current} operator=LogicOperator) right=ConstraintExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//CompareExpression (=> ({ConstraintExpression.left=current} operator=LogicOperator) right=ConstraintExpression)?
		public Group getGroup() { return cGroup; }
		
		//CompareExpression
		public RuleCall getCompareExpressionParserRuleCall_0() { return cCompareExpressionParserRuleCall_0; }
		
		//(=> ({ConstraintExpression.left=current} operator=LogicOperator) right=ConstraintExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({ConstraintExpression.left=current} operator=LogicOperator)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({ConstraintExpression.left=current} operator=LogicOperator)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{ConstraintExpression.left=current}
		public Action getConstraintExpressionLeftAction_1_0_0_0() { return cConstraintExpressionLeftAction_1_0_0_0; }
		
		//operator=LogicOperator
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }
		
		//LogicOperator
		public RuleCall getOperatorLogicOperatorEnumRuleCall_1_0_0_1_0() { return cOperatorLogicOperatorEnumRuleCall_1_0_0_1_0; }
		
		//right=ConstraintExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//ConstraintExpression
		public RuleCall getRightConstraintExpressionParserRuleCall_1_1_0() { return cRightConstraintExpressionParserRuleCall_1_1_0; }
	}
	public class CompareExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.CompareExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBasicConstraintParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cCompareExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cComparatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cComparatorComparatorEnumRuleCall_1_0_0_1_0 = (RuleCall)cComparatorAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightBasicConstraintParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//CompareExpression:
		//	BasicConstraint (=> ({CompareExpression.left=current} comparator=Comparator) right=BasicConstraint)?;
		@Override public ParserRule getRule() { return rule; }
		
		//BasicConstraint (=> ({CompareExpression.left=current} comparator=Comparator) right=BasicConstraint)?
		public Group getGroup() { return cGroup; }
		
		//BasicConstraint
		public RuleCall getBasicConstraintParserRuleCall_0() { return cBasicConstraintParserRuleCall_0; }
		
		//(=> ({CompareExpression.left=current} comparator=Comparator) right=BasicConstraint)?
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({CompareExpression.left=current} comparator=Comparator)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({CompareExpression.left=current} comparator=Comparator)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{CompareExpression.left=current}
		public Action getCompareExpressionLeftAction_1_0_0_0() { return cCompareExpressionLeftAction_1_0_0_0; }
		
		//comparator=Comparator
		public Assignment getComparatorAssignment_1_0_0_1() { return cComparatorAssignment_1_0_0_1; }
		
		//Comparator
		public RuleCall getComparatorComparatorEnumRuleCall_1_0_0_1_0() { return cComparatorComparatorEnumRuleCall_1_0_0_1_0; }
		
		//right=BasicConstraint
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//BasicConstraint
		public RuleCall getRightBasicConstraintParserRuleCall_1_1_0() { return cRightBasicConstraintParserRuleCall_1_1_0; }
	}
	public class BasicConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.BasicConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParenthesisConstraintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperandParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNegationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BasicConstraint:
		//	ParenthesisConstraint | Operand | Negation;
		@Override public ParserRule getRule() { return rule; }
		
		//ParenthesisConstraint | Operand | Negation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ParenthesisConstraint
		public RuleCall getParenthesisConstraintParserRuleCall_0() { return cParenthesisConstraintParserRuleCall_0; }
		
		//Operand
		public RuleCall getOperandParserRuleCall_1() { return cOperandParserRuleCall_1; }
		
		//Negation
		public RuleCall getNegationParserRuleCall_2() { return cNegationParserRuleCall_2; }
	}
	public class NegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.Negation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConstraintAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstraintConstraintExpressionParserRuleCall_1_0 = (RuleCall)cConstraintAssignment_1.eContents().get(0);
		
		//Negation:
		//	'!' constraint=ConstraintExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'!' constraint=ConstraintExpression
		public Group getGroup() { return cGroup; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }
		
		//constraint=ConstraintExpression
		public Assignment getConstraintAssignment_1() { return cConstraintAssignment_1; }
		
		//ConstraintExpression
		public RuleCall getConstraintConstraintExpressionParserRuleCall_1_0() { return cConstraintConstraintExpressionParserRuleCall_1_0; }
	}
	public class ParenthesisConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.ParenthesisConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConstraintAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstraintConstraintExpressionParserRuleCall_1_0 = (RuleCall)cConstraintAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParenthesisConstraint:
		//	'(' constraint=ConstraintExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' constraint=ConstraintExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//constraint=ConstraintExpression
		public Assignment getConstraintAssignment_1() { return cConstraintAssignment_1; }
		
		//ConstraintExpression
		public RuleCall getConstraintConstraintExpressionParserRuleCall_1_0() { return cConstraintConstraintExpressionParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class OperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.Operand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNodePropertyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInstanceOfParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Operand:
		//	Literal | NodeProperty | InstanceOf;
		@Override public ParserRule getRule() { return rule; }
		
		//Literal | NodeProperty | InstanceOf
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }
		
		//NodeProperty
		public RuleCall getNodePropertyParserRuleCall_1() { return cNodePropertyParserRuleCall_1; }
		
		//InstanceOf
		public RuleCall getInstanceOfParserRuleCall_2() { return cInstanceOfParserRuleCall_2; }
	}
	public class InstanceOfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.InstanceOf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeJvmTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeJvmTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeJvmTypeCrossReference_1_0.eContents().get(1);
		
		//InstanceOf:
		//	'is' type=[types::JvmType];
		@Override public ParserRule getRule() { return rule; }
		
		//'is' type=[types::JvmType]
		public Group getGroup() { return cGroup; }
		
		//'is'
		public Keyword getIsKeyword_0() { return cIsKeyword_0; }
		
		//type=[types::JvmType]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[types::JvmType]
		public CrossReference getTypeJvmTypeCrossReference_1_0() { return cTypeJvmTypeCrossReference_1_0; }
		
		//ID
		public RuleCall getTypeJvmTypeIDTerminalRuleCall_1_0_1() { return cTypeJvmTypeIDTerminalRuleCall_1_0_1; }
	}
	public class TargetTraceModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.TargetTraceModel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTraceModelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cUseKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cTraceModelReferenceParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//TargetTraceModel:
		//	TraceModel | 'use' TraceModelReference;
		@Override public ParserRule getRule() { return rule; }
		
		//TraceModel | 'use' TraceModelReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TraceModel
		public RuleCall getTraceModelParserRuleCall_0() { return cTraceModelParserRuleCall_0; }
		
		//'use' TraceModelReference
		public Group getGroup_1() { return cGroup_1; }
		
		//'use'
		public Keyword getUseKeyword_1_0() { return cUseKeyword_1_0; }
		
		//TraceModelReference
		public RuleCall getTraceModelReferenceParserRuleCall_1_1() { return cTraceModelReferenceParserRuleCall_1_1; }
	}
	public class TraceModelReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.TraceModelReference");
		private final Assignment cTraceModelAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTraceModelTraceModelCrossReference_0 = (CrossReference)cTraceModelAssignment.eContents().get(0);
		private final RuleCall cTraceModelTraceModelIDTerminalRuleCall_0_1 = (RuleCall)cTraceModelTraceModelCrossReference_0.eContents().get(1);
		
		//TraceModelReference:
		//	traceModel=[TraceModel];
		@Override public ParserRule getRule() { return rule; }
		
		//traceModel=[TraceModel]
		public Assignment getTraceModelAssignment() { return cTraceModelAssignment; }
		
		//[TraceModel]
		public CrossReference getTraceModelTraceModelCrossReference_0() { return cTraceModelTraceModelCrossReference_0; }
		
		//ID
		public RuleCall getTraceModelTraceModelIDTerminalRuleCall_0_1() { return cTraceModelTraceModelIDTerminalRuleCall_0_1; }
	}
	public class TraceModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.TraceModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNodeSetRelationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNodeSetRelationsNodeSetRelationParserRuleCall_2_0 = (RuleCall)cNodeSetRelationsAssignment_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TraceModel:
		//	name=ID '<' nodeSetRelations+=NodeSetRelation+ '>';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '<' nodeSetRelations+=NodeSetRelation+ '>'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//nodeSetRelations+=NodeSetRelation+
		public Assignment getNodeSetRelationsAssignment_2() { return cNodeSetRelationsAssignment_2; }
		
		//NodeSetRelation
		public RuleCall getNodeSetRelationsNodeSetRelationParserRuleCall_2_0() { return cNodeSetRelationsNodeSetRelationParserRuleCall_2_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}
	public class NodeSetRelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.NodeSetRelation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceNodesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSourceNodesNodeTypeParserRuleCall_1_0 = (RuleCall)cSourceNodesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSourceNodesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSourceNodesNodeTypeParserRuleCall_2_1_0 = (RuleCall)cSourceNodesAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetNodesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTargetNodesNodeTypeParserRuleCall_4_0 = (RuleCall)cTargetNodesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTargetNodesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTargetNodesNodeTypeParserRuleCall_5_1_0 = (RuleCall)cTargetNodesAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//NodeSetRelation:
		//	'('
		//	sourceNodes+=NodeType (',' sourceNodes+=NodeType)*
		//	':'
		//	targetNodes+=NodeType (',' targetNodes+=NodeType)*
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' sourceNodes+=NodeType (',' sourceNodes+=NodeType)* ':' targetNodes+=NodeType (',' targetNodes+=NodeType)* ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//sourceNodes+=NodeType
		public Assignment getSourceNodesAssignment_1() { return cSourceNodesAssignment_1; }
		
		//NodeType
		public RuleCall getSourceNodesNodeTypeParserRuleCall_1_0() { return cSourceNodesNodeTypeParserRuleCall_1_0; }
		
		//(',' sourceNodes+=NodeType)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//sourceNodes+=NodeType
		public Assignment getSourceNodesAssignment_2_1() { return cSourceNodesAssignment_2_1; }
		
		//NodeType
		public RuleCall getSourceNodesNodeTypeParserRuleCall_2_1_0() { return cSourceNodesNodeTypeParserRuleCall_2_1_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//targetNodes+=NodeType
		public Assignment getTargetNodesAssignment_4() { return cTargetNodesAssignment_4; }
		
		//NodeType
		public RuleCall getTargetNodesNodeTypeParserRuleCall_4_0() { return cTargetNodesNodeTypeParserRuleCall_4_0; }
		
		//(',' targetNodes+=NodeType)*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//targetNodes+=NodeType
		public Assignment getTargetNodesAssignment_5_1() { return cTargetNodesAssignment_5_1; }
		
		//NodeType
		public RuleCall getTargetNodesNodeTypeParserRuleCall_5_1_0() { return cTargetNodesNodeTypeParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class NodeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.NodeType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeJvmTypeCrossReference_0 = (CrossReference)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeJvmTypeIDTerminalRuleCall_0_1 = (RuleCall)cTypeJvmTypeCrossReference_0.eContents().get(1);
		
		//NodeType:
		//	type=[types::JvmType];
		@Override public ParserRule getRule() { return rule; }
		
		//type=[types::JvmType]
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//[types::JvmType]
		public CrossReference getTypeJvmTypeCrossReference_0() { return cTypeJvmTypeCrossReference_0; }
		
		//ID
		public RuleCall getTypeJvmTypeIDTerminalRuleCall_0_1() { return cTypeJvmTypeIDTerminalRuleCall_0_1; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFloatLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cArrayLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//// -----------------------------------
		//// Literal
		//Literal:
		//	StringLiteral | IntLiteral | FloatLiteral | BooleanLiteral | ArrayLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//StringLiteral | IntLiteral | FloatLiteral | BooleanLiteral | ArrayLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_0() { return cStringLiteralParserRuleCall_0; }
		
		//IntLiteral
		public RuleCall getIntLiteralParserRuleCall_1() { return cIntLiteralParserRuleCall_1; }
		
		//FloatLiteral
		public RuleCall getFloatLiteralParserRuleCall_2() { return cFloatLiteralParserRuleCall_2; }
		
		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_3() { return cBooleanLiteralParserRuleCall_3; }
		
		//ArrayLiteral
		public RuleCall getArrayLiteralParserRuleCall_4() { return cArrayLiteralParserRuleCall_4; }
	}
	public class ArrayLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.ArrayLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLiteralsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLiteralsLiteralParserRuleCall_1_0 = (RuleCall)cLiteralsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLiteralsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLiteralsLiteralParserRuleCall_2_1_0 = (RuleCall)cLiteralsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ArrayLiteral:
		//	'{' literals+=Literal (',' literals+=Literal)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' literals+=Literal (',' literals+=Literal)* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//literals+=Literal
		public Assignment getLiteralsAssignment_1() { return cLiteralsAssignment_1; }
		
		//Literal
		public RuleCall getLiteralsLiteralParserRuleCall_1_0() { return cLiteralsLiteralParserRuleCall_1_0; }
		
		//(',' literals+=Literal)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//literals+=Literal
		public Assignment getLiteralsAssignment_2_1() { return cLiteralsAssignment_2_1; }
		
		//Literal
		public RuleCall getLiteralsLiteralParserRuleCall_2_1_0() { return cLiteralsLiteralParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.IntLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntLiteral:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class FloatLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.FloatLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueFLOATTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//FloatLiteral:
		//	value=FLOAT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=FLOAT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//FLOAT
		public RuleCall getValueFLOATTerminalRuleCall_0() { return cValueFLOATTerminalRuleCall_0; }
	}
	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.BooleanLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBOOLEANTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanLiteral:
		//	value=BOOLEAN;
		@Override public ParserRule getRule() { return rule; }
		
		//value=BOOLEAN
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//BOOLEAN
		public RuleCall getValueBOOLEANTerminalRuleCall_0() { return cValueBOOLEANTerminalRuleCall_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID (=> '.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID (=> '.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//(=> '.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> '.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName ('.' '*')?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName ('.' '*')?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//('.' '*')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}
	
	public class ModelModifierElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.ModelModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINPUTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINPUTInKeyword_0_0 = (Keyword)cINPUTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOUTPUTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOUTPUTOutKeyword_1_0 = (Keyword)cOUTPUTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cINTERMEDIATEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cINTERMEDIATEIoKeyword_2_0 = (Keyword)cINTERMEDIATEEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ModelModifier:
		//	INPUT='in' |
		//	OUTPUT='out' |
		//	INTERMEDIATE='io';
		public EnumRule getRule() { return rule; }
		
		//INPUT='in' | OUTPUT='out' | INTERMEDIATE='io'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INPUT='in'
		public EnumLiteralDeclaration getINPUTEnumLiteralDeclaration_0() { return cINPUTEnumLiteralDeclaration_0; }
		
		//'in'
		public Keyword getINPUTInKeyword_0_0() { return cINPUTInKeyword_0_0; }
		
		//OUTPUT='out'
		public EnumLiteralDeclaration getOUTPUTEnumLiteralDeclaration_1() { return cOUTPUTEnumLiteralDeclaration_1; }
		
		//'out'
		public Keyword getOUTPUTOutKeyword_1_0() { return cOUTPUTOutKeyword_1_0; }
		
		//INTERMEDIATE='io'
		public EnumLiteralDeclaration getINTERMEDIATEEnumLiteralDeclaration_2() { return cINTERMEDIATEEnumLiteralDeclaration_2; }
		
		//'io'
		public Keyword getINTERMEDIATEIoKeyword_2_0() { return cINTERMEDIATEIoKeyword_2_0; }
	}
	public class LogicOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.LogicOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDAmpersandKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cORVerticalLineKeyword_1_0 = (Keyword)cOREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum LogicOperator:
		//	AND='&' |
		//	OR='|';
		public EnumRule getRule() { return rule; }
		
		//AND='&' | OR='|'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AND='&'
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }
		
		//'&'
		public Keyword getANDAmpersandKeyword_0_0() { return cANDAmpersandKeyword_0_0; }
		
		//OR='|'
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_1() { return cOREnumLiteralDeclaration_1; }
		
		//'|'
		public Keyword getORVerticalLineKeyword_1_0() { return cORVerticalLineKeyword_1_0; }
	}
	public class ComparatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.Comparator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEQEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNEExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGRGreaterThanSignKeyword_2_0 = (Keyword)cGREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLWEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLWLessThanSignKeyword_3_0 = (Keyword)cLWEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGEGreaterThanSignEqualsSignKeyword_4_0 = (Keyword)cGEEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cLEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cLELessThanSignEqualsSignKeyword_5_0 = (Keyword)cLEEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cLIKEEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cLIKETildeKeyword_6_0 = (Keyword)cLIKEEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum Comparator:
		//	EQ='==' |
		//	NE='!=' |
		//	GR='>' |
		//	LW='<' |
		//	GE='>=' |
		//	LE='<=' |
		//	LIKE='~';
		public EnumRule getRule() { return rule; }
		
		//EQ='==' | NE='!=' | GR='>' | LW='<' | GE='>=' | LE='<=' | LIKE='~'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQ='=='
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_0() { return cEQEnumLiteralDeclaration_0; }
		
		//'=='
		public Keyword getEQEqualsSignEqualsSignKeyword_0_0() { return cEQEqualsSignEqualsSignKeyword_0_0; }
		
		//NE='!='
		public EnumLiteralDeclaration getNEEnumLiteralDeclaration_1() { return cNEEnumLiteralDeclaration_1; }
		
		//'!='
		public Keyword getNEExclamationMarkEqualsSignKeyword_1_0() { return cNEExclamationMarkEqualsSignKeyword_1_0; }
		
		//GR='>'
		public EnumLiteralDeclaration getGREnumLiteralDeclaration_2() { return cGREnumLiteralDeclaration_2; }
		
		//'>'
		public Keyword getGRGreaterThanSignKeyword_2_0() { return cGRGreaterThanSignKeyword_2_0; }
		
		//LW='<'
		public EnumLiteralDeclaration getLWEnumLiteralDeclaration_3() { return cLWEnumLiteralDeclaration_3; }
		
		//'<'
		public Keyword getLWLessThanSignKeyword_3_0() { return cLWLessThanSignKeyword_3_0; }
		
		//GE='>='
		public EnumLiteralDeclaration getGEEnumLiteralDeclaration_4() { return cGEEnumLiteralDeclaration_4; }
		
		//'>='
		public Keyword getGEGreaterThanSignEqualsSignKeyword_4_0() { return cGEGreaterThanSignEqualsSignKeyword_4_0; }
		
		//LE='<='
		public EnumLiteralDeclaration getLEEnumLiteralDeclaration_5() { return cLEEnumLiteralDeclaration_5; }
		
		//'<='
		public Keyword getLELessThanSignEqualsSignKeyword_5_0() { return cLELessThanSignEqualsSignKeyword_5_0; }
		
		//LIKE='~'
		public EnumLiteralDeclaration getLIKEEnumLiteralDeclaration_6() { return cLIKEEnumLiteralDeclaration_6; }
		
		//'~'
		public Keyword getLIKETildeKeyword_6_0() { return cLIKETildeKeyword_6_0; }
	}
	
	private final GecoModelElements pGecoModel;
	private final ImportElements pImport;
	private final RegisteredRootClassElements pRegisteredRootClass;
	private final ModelSequenceElements pModelSequence;
	private final ModelModifierElements eModelModifier;
	private final ModelElements pModel;
	private final FragmentElements pFragment;
	private final WeaverElements pWeaver;
	private final AspectModelElements pAspectModel;
	private final SeparateModelsElements pSeparateModels;
	private final CombinedModelElements pCombinedModel;
	private final GeneratorElements pGenerator;
	private final SourceModelSelectorElements pSourceModelSelector;
	private final TargetModelElements pTargetModel;
	private final ModelTypeElements pModelType;
	private final NodePropertyElements pNodeProperty;
	private final ConstraintExpressionElements pConstraintExpression;
	private final CompareExpressionElements pCompareExpression;
	private final BasicConstraintElements pBasicConstraint;
	private final NegationElements pNegation;
	private final ParenthesisConstraintElements pParenthesisConstraint;
	private final OperandElements pOperand;
	private final InstanceOfElements pInstanceOf;
	private final TargetTraceModelElements pTargetTraceModel;
	private final TraceModelReferenceElements pTraceModelReference;
	private final TraceModelElements pTraceModel;
	private final NodeSetRelationElements pNodeSetRelation;
	private final NodeTypeElements pNodeType;
	private final LiteralElements pLiteral;
	private final ArrayLiteralElements pArrayLiteral;
	private final StringLiteralElements pStringLiteral;
	private final IntLiteralElements pIntLiteral;
	private final FloatLiteralElements pFloatLiteral;
	private final BooleanLiteralElements pBooleanLiteral;
	private final LogicOperatorElements eLogicOperator;
	private final ComparatorElements eComparator;
	private final QualifiedNameElements pQualifiedName;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final TerminalRule tDIGIT;
	private final TerminalRule tFLOAT;
	private final TerminalRule tBOOLEAN;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ArchitectureGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pGecoModel = new GecoModelElements();
		this.pImport = new ImportElements();
		this.pRegisteredRootClass = new RegisteredRootClassElements();
		this.pModelSequence = new ModelSequenceElements();
		this.eModelModifier = new ModelModifierElements();
		this.pModel = new ModelElements();
		this.pFragment = new FragmentElements();
		this.pWeaver = new WeaverElements();
		this.pAspectModel = new AspectModelElements();
		this.pSeparateModels = new SeparateModelsElements();
		this.pCombinedModel = new CombinedModelElements();
		this.pGenerator = new GeneratorElements();
		this.pSourceModelSelector = new SourceModelSelectorElements();
		this.pTargetModel = new TargetModelElements();
		this.pModelType = new ModelTypeElements();
		this.pNodeProperty = new NodePropertyElements();
		this.pConstraintExpression = new ConstraintExpressionElements();
		this.pCompareExpression = new CompareExpressionElements();
		this.pBasicConstraint = new BasicConstraintElements();
		this.pNegation = new NegationElements();
		this.pParenthesisConstraint = new ParenthesisConstraintElements();
		this.pOperand = new OperandElements();
		this.pInstanceOf = new InstanceOfElements();
		this.pTargetTraceModel = new TargetTraceModelElements();
		this.pTraceModelReference = new TraceModelReferenceElements();
		this.pTraceModel = new TraceModelElements();
		this.pNodeSetRelation = new NodeSetRelationElements();
		this.pNodeType = new NodeTypeElements();
		this.pLiteral = new LiteralElements();
		this.pArrayLiteral = new ArrayLiteralElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pIntLiteral = new IntLiteralElements();
		this.pFloatLiteral = new FloatLiteralElements();
		this.pBooleanLiteral = new BooleanLiteralElements();
		this.eLogicOperator = new LogicOperatorElements();
		this.eComparator = new ComparatorElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.DIGIT");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.FLOAT");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.se.geco.architecture.Architecture.BOOLEAN");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.se.geco.architecture.Architecture".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//GecoModel:
	//	'package' name=QualifiedName
	//	imports+=Import*
	//	registeredRootClass+=RegisteredRootClass*
	//	models+=ModelSequence*
	//	fragments+=Fragment*;
	public GecoModelElements getGecoModelAccess() {
		return pGecoModel;
	}
	
	public ParserRule getGecoModelRule() {
		return getGecoModelAccess().getRule();
	}
	
	//Import:
	//	'import' importedNamespace=[types::JvmType|QualifiedName];
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//RegisteredRootClass:
	//	'register' name=ID (importedNamespace=[types::JvmType|QualifiedName] | isText?='text' extension=STRING);
	public RegisteredRootClassElements getRegisteredRootClassAccess() {
		return pRegisteredRootClass;
	}
	
	public ParserRule getRegisteredRootClassRule() {
		return getRegisteredRootClassAccess().getRule();
	}
	
	//ModelSequence:
	//	'model' modifier=ModelModifier type=ModelType models+=Model (',' models+=Model)*;
	public ModelSequenceElements getModelSequenceAccess() {
		return pModelSequence;
	}
	
	public ParserRule getModelSequenceRule() {
		return getModelSequenceAccess().getRule();
	}
	
	//enum ModelModifier:
	//	INPUT='in' |
	//	OUTPUT='out' |
	//	INTERMEDIATE='io';
	public ModelModifierElements getModelModifierAccess() {
		return eModelModifier;
	}
	
	public EnumRule getModelModifierRule() {
		return getModelModifierAccess().getRule();
	}
	
	//Model:
	//	name=ID;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Fragment:
	//	Generator | Weaver;
	public FragmentElements getFragmentAccess() {
		return pFragment;
	}
	
	public ParserRule getFragmentRule() {
		return getFragmentAccess().getRule();
	}
	
	//Weaver:
	//	'weave' reference=[types::JvmType] (sourceModel=SourceModelSelector | 'link') aspectModel=AspectModel ('=>'
	//	targetModel=TargetModel)?;
	public WeaverElements getWeaverAccess() {
		return pWeaver;
	}
	
	public ParserRule getWeaverRule() {
		return getWeaverAccess().getRule();
	}
	
	//AspectModel:
	//	CombinedModel | SeparateModels;
	public AspectModelElements getAspectModelAccess() {
		return pAspectModel;
	}
	
	public ParserRule getAspectModelRule() {
		return getAspectModelAccess().getRule();
	}
	
	//SeparateModels:
	//	'pointcut' pointcut=TargetModel 'advice' advice=CombinedModel;
	public SeparateModelsElements getSeparateModelsAccess() {
		return pSeparateModels;
	}
	
	public ParserRule getSeparateModelsRule() {
		return getSeparateModelsAccess().getRule();
	}
	
	//CombinedModel:
	//	TargetModel | Generator;
	public CombinedModelElements getCombinedModelAccess() {
		return pCombinedModel;
	}
	
	public ParserRule getCombinedModelRule() {
		return getCombinedModelAccess().getRule();
	}
	
	//Generator:
	//	'generate' reference=[types::JvmType] ('(' sourceAuxModels+=SourceModelSelector (','
	//	sourceAuxModels+=SourceModelSelector)* ')')?
	//	'source' sourceModel=SourceModelSelector ('target' targetModel=TargetModel)? ('trace' ('out'
	//	targetTraceModel=TargetTraceModel)? ('in' sourceTraceModels+=TraceModelReference (','
	//	sourceTraceModels+=TraceModelReference)*)?)?;
	public GeneratorElements getGeneratorAccess() {
		return pGenerator;
	}
	
	public ParserRule getGeneratorRule() {
		return getGeneratorAccess().getRule();
	}
	
	//SourceModelSelector:
	//	reference=[Model] ('[' constraint=ConstraintExpression ']')? ('/' property=NodeProperty)? | {SourceModelSelector}
	//	'null';
	public SourceModelSelectorElements getSourceModelSelectorAccess() {
		return pSourceModelSelector;
	}
	
	public ParserRule getSourceModelSelectorRule() {
		return getSourceModelSelectorAccess().getRule();
	}
	
	//TargetModel:
	//	{TargetModel} reference=[Model];
	public TargetModelElements getTargetModelAccess() {
		return pTargetModel;
	}
	
	public ParserRule getTargetModelRule() {
		return getTargetModelAccess().getRule();
	}
	
	//ModelType:
	//	target=[RegisteredRootClass] ('/' property=NodeProperty)? collection?='[]'?;
	public ModelTypeElements getModelTypeAccess() {
		return pModelType;
	}
	
	public ParserRule getModelTypeRule() {
		return getModelTypeAccess().getRule();
	}
	
	//NodeProperty:
	//	property=[types::JvmMember] ('[' constraint=ConstraintExpression ']')? ('/' subProperty=NodeProperty)?;
	public NodePropertyElements getNodePropertyAccess() {
		return pNodeProperty;
	}
	
	public ParserRule getNodePropertyRule() {
		return getNodePropertyAccess().getRule();
	}
	
	//ConstraintExpression:
	//	CompareExpression (=> ({ConstraintExpression.left=current} operator=LogicOperator) right=ConstraintExpression)?;
	public ConstraintExpressionElements getConstraintExpressionAccess() {
		return pConstraintExpression;
	}
	
	public ParserRule getConstraintExpressionRule() {
		return getConstraintExpressionAccess().getRule();
	}
	
	//CompareExpression:
	//	BasicConstraint (=> ({CompareExpression.left=current} comparator=Comparator) right=BasicConstraint)?;
	public CompareExpressionElements getCompareExpressionAccess() {
		return pCompareExpression;
	}
	
	public ParserRule getCompareExpressionRule() {
		return getCompareExpressionAccess().getRule();
	}
	
	//BasicConstraint:
	//	ParenthesisConstraint | Operand | Negation;
	public BasicConstraintElements getBasicConstraintAccess() {
		return pBasicConstraint;
	}
	
	public ParserRule getBasicConstraintRule() {
		return getBasicConstraintAccess().getRule();
	}
	
	//Negation:
	//	'!' constraint=ConstraintExpression;
	public NegationElements getNegationAccess() {
		return pNegation;
	}
	
	public ParserRule getNegationRule() {
		return getNegationAccess().getRule();
	}
	
	//ParenthesisConstraint:
	//	'(' constraint=ConstraintExpression ')';
	public ParenthesisConstraintElements getParenthesisConstraintAccess() {
		return pParenthesisConstraint;
	}
	
	public ParserRule getParenthesisConstraintRule() {
		return getParenthesisConstraintAccess().getRule();
	}
	
	//Operand:
	//	Literal | NodeProperty | InstanceOf;
	public OperandElements getOperandAccess() {
		return pOperand;
	}
	
	public ParserRule getOperandRule() {
		return getOperandAccess().getRule();
	}
	
	//InstanceOf:
	//	'is' type=[types::JvmType];
	public InstanceOfElements getInstanceOfAccess() {
		return pInstanceOf;
	}
	
	public ParserRule getInstanceOfRule() {
		return getInstanceOfAccess().getRule();
	}
	
	//TargetTraceModel:
	//	TraceModel | 'use' TraceModelReference;
	public TargetTraceModelElements getTargetTraceModelAccess() {
		return pTargetTraceModel;
	}
	
	public ParserRule getTargetTraceModelRule() {
		return getTargetTraceModelAccess().getRule();
	}
	
	//TraceModelReference:
	//	traceModel=[TraceModel];
	public TraceModelReferenceElements getTraceModelReferenceAccess() {
		return pTraceModelReference;
	}
	
	public ParserRule getTraceModelReferenceRule() {
		return getTraceModelReferenceAccess().getRule();
	}
	
	//TraceModel:
	//	name=ID '<' nodeSetRelations+=NodeSetRelation+ '>';
	public TraceModelElements getTraceModelAccess() {
		return pTraceModel;
	}
	
	public ParserRule getTraceModelRule() {
		return getTraceModelAccess().getRule();
	}
	
	//NodeSetRelation:
	//	'('
	//	sourceNodes+=NodeType (',' sourceNodes+=NodeType)*
	//	':'
	//	targetNodes+=NodeType (',' targetNodes+=NodeType)*
	//	')';
	public NodeSetRelationElements getNodeSetRelationAccess() {
		return pNodeSetRelation;
	}
	
	public ParserRule getNodeSetRelationRule() {
		return getNodeSetRelationAccess().getRule();
	}
	
	//NodeType:
	//	type=[types::JvmType];
	public NodeTypeElements getNodeTypeAccess() {
		return pNodeType;
	}
	
	public ParserRule getNodeTypeRule() {
		return getNodeTypeAccess().getRule();
	}
	
	//// -----------------------------------
	//// Literal
	//Literal:
	//	StringLiteral | IntLiteral | FloatLiteral | BooleanLiteral | ArrayLiteral;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//ArrayLiteral:
	//	'{' literals+=Literal (',' literals+=Literal)* '}';
	public ArrayLiteralElements getArrayLiteralAccess() {
		return pArrayLiteral;
	}
	
	public ParserRule getArrayLiteralRule() {
		return getArrayLiteralAccess().getRule();
	}
	
	//StringLiteral:
	//	value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//IntLiteral:
	//	value=INT;
	public IntLiteralElements getIntLiteralAccess() {
		return pIntLiteral;
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}
	
	//FloatLiteral:
	//	value=FLOAT;
	public FloatLiteralElements getFloatLiteralAccess() {
		return pFloatLiteral;
	}
	
	public ParserRule getFloatLiteralRule() {
		return getFloatLiteralAccess().getRule();
	}
	
	//BooleanLiteral:
	//	value=BOOLEAN;
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return pBooleanLiteral;
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}
	
	//enum LogicOperator:
	//	AND='&' |
	//	OR='|';
	public LogicOperatorElements getLogicOperatorAccess() {
		return eLogicOperator;
	}
	
	public EnumRule getLogicOperatorRule() {
		return getLogicOperatorAccess().getRule();
	}
	
	//enum Comparator:
	//	EQ='==' |
	//	NE='!=' |
	//	GR='>' |
	//	LW='<' |
	//	GE='>=' |
	//	LE='<=' |
	//	LIKE='~';
	public ComparatorElements getComparatorAccess() {
		return eComparator;
	}
	
	public EnumRule getComparatorRule() {
		return getComparatorAccess().getRule();
	}
	
	//QualifiedName:
	//	ID (=> '.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName ('.' '*')?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//terminal fragment DIGIT:
	//	'0'..'9';
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	//terminal FLOAT:
	//	'-'? DIGIT+ ('.' DIGIT*) (("e" | "E") ("+" | "-")? DIGIT+)? 'f'? |
	//	'-'? DIGIT+ 'f';
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//terminal BOOLEAN:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
