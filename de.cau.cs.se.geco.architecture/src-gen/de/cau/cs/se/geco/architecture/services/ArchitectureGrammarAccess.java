/*
* generated by Xtext
*/
package de.cau.cs.se.geco.architecture.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class ArchitectureGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cImportSectionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportSectionXImportSectionParserRuleCall_2_0 = (RuleCall)cImportSectionAssignment_2.eContents().get(0);
		private final Assignment cMetamodelsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMetamodelsMetamodelParserRuleCall_3_0 = (RuleCall)cMetamodelsAssignment_3.eContents().get(0);
		private final Assignment cConnectionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConnectionsConnectionParserRuleCall_4_0 = (RuleCall)cConnectionsAssignment_4.eContents().get(0);
		
		//Model:
		//	"package" name=QualifiedName importSection=XImportSection? metamodels+=Metamodel+ // prerequisites
		//	// handle results
		//	connections+=Connection*;
		public ParserRule getRule() { return rule; }

		//"package" name=QualifiedName importSection=XImportSection? metamodels+=Metamodel+ // prerequisites
		//// handle results
		//connections+=Connection*
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//importSection=XImportSection?
		public Assignment getImportSectionAssignment_2() { return cImportSectionAssignment_2; }

		//XImportSection
		public RuleCall getImportSectionXImportSectionParserRuleCall_2_0() { return cImportSectionXImportSectionParserRuleCall_2_0; }

		//metamodels+=Metamodel+
		public Assignment getMetamodelsAssignment_3() { return cMetamodelsAssignment_3; }

		//Metamodel
		public RuleCall getMetamodelsMetamodelParserRuleCall_3_0() { return cMetamodelsMetamodelParserRuleCall_3_0; }

		//// prerequisites
		//// handle results
		//connections+=Connection*
		public Assignment getConnectionsAssignment_4() { return cConnectionsAssignment_4; }

		//Connection
		public RuleCall getConnectionsConnectionParserRuleCall_4_0() { return cConnectionsConnectionParserRuleCall_4_0; }
	}

	public class MetamodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Metamodel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMetamodelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cModelPackageAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cModelPackageEPackageCrossReference_2_0_0 = (CrossReference)cModelPackageAssignment_2_0.eContents().get(0);
		private final RuleCall cModelPackageEPackageSTRINGTerminalRuleCall_2_0_0_1 = (RuleCall)cModelPackageEPackageCrossReference_2_0_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cIsTextAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final Keyword cIsTextTextKeyword_2_1_0_0 = (Keyword)cIsTextAssignment_2_1_0.eContents().get(0);
		private final Assignment cExtensionAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cExtensionSTRINGTerminalRuleCall_2_1_1_0 = (RuleCall)cExtensionAssignment_2_1_1.eContents().get(0);
		
		//Metamodel:
		//	"metamodel" name=ValidID (modelPackage=[ecore::EPackage|STRING] | isText?="text" extension=STRING);
		public ParserRule getRule() { return rule; }

		//"metamodel" name=ValidID (modelPackage=[ecore::EPackage|STRING] | isText?="text" extension=STRING)
		public Group getGroup() { return cGroup; }

		//"metamodel"
		public Keyword getMetamodelKeyword_0() { return cMetamodelKeyword_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//modelPackage=[ecore::EPackage|STRING] | isText?="text" extension=STRING
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//modelPackage=[ecore::EPackage|STRING]
		public Assignment getModelPackageAssignment_2_0() { return cModelPackageAssignment_2_0; }

		//[ecore::EPackage|STRING]
		public CrossReference getModelPackageEPackageCrossReference_2_0_0() { return cModelPackageEPackageCrossReference_2_0_0; }

		//STRING
		public RuleCall getModelPackageEPackageSTRINGTerminalRuleCall_2_0_0_1() { return cModelPackageEPackageSTRINGTerminalRuleCall_2_0_0_1; }

		//isText?="text" extension=STRING
		public Group getGroup_2_1() { return cGroup_2_1; }

		//isText?="text"
		public Assignment getIsTextAssignment_2_1_0() { return cIsTextAssignment_2_1_0; }

		//"text"
		public Keyword getIsTextTextKeyword_2_1_0_0() { return cIsTextTextKeyword_2_1_0_0; }

		//extension=STRING
		public Assignment getExtensionAssignment_2_1_1() { return cExtensionAssignment_2_1_1; }

		//STRING
		public RuleCall getExtensionSTRINGTerminalRuleCall_2_1_1_0() { return cExtensionSTRINGTerminalRuleCall_2_1_1_0; }
	}

	public class ConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Connection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGeneratorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMergerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Connection:
		//	Generator | Merger;
		public ParserRule getRule() { return rule; }

		//Generator | Merger
		public Alternatives getAlternatives() { return cAlternatives; }

		//Generator
		public RuleCall getGeneratorParserRuleCall_0() { return cGeneratorParserRuleCall_0; }

		//Merger
		public RuleCall getMergerParserRuleCall_1() { return cMergerParserRuleCall_1; }
	}

	public class MergerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Merger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMergeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMergerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMergerJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cMergerAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cSourceModelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSourceModelSourceModelNodeSelectorParserRuleCall_3_0 = (RuleCall)cSourceModelAssignment_3.eContents().get(0);
		private final Assignment cAspectModelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAspectModelTargetModelNodeTypeParserRuleCall_4_0 = (RuleCall)cAspectModelAssignment_4.eContents().get(0);
		private final Assignment cTargetModelAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTargetModelTargetModelNodeTypeParserRuleCall_5_0 = (RuleCall)cTargetModelAssignment_5.eContents().get(0);
		
		//Merger:
		//	"merge" merger=JvmTypeReference name=ID sourceModel=SourceModelNodeSelector aspectModel=TargetModelNodeType
		//	targetModel=TargetModelNodeType;
		public ParserRule getRule() { return rule; }

		//"merge" merger=JvmTypeReference name=ID sourceModel=SourceModelNodeSelector aspectModel=TargetModelNodeType
		//targetModel=TargetModelNodeType
		public Group getGroup() { return cGroup; }

		//"merge"
		public Keyword getMergeKeyword_0() { return cMergeKeyword_0; }

		//merger=JvmTypeReference
		public Assignment getMergerAssignment_1() { return cMergerAssignment_1; }

		//JvmTypeReference
		public RuleCall getMergerJvmTypeReferenceParserRuleCall_1_0() { return cMergerJvmTypeReferenceParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//sourceModel=SourceModelNodeSelector
		public Assignment getSourceModelAssignment_3() { return cSourceModelAssignment_3; }

		//SourceModelNodeSelector
		public RuleCall getSourceModelSourceModelNodeSelectorParserRuleCall_3_0() { return cSourceModelSourceModelNodeSelectorParserRuleCall_3_0; }

		//aspectModel=TargetModelNodeType
		public Assignment getAspectModelAssignment_4() { return cAspectModelAssignment_4; }

		//TargetModelNodeType
		public RuleCall getAspectModelTargetModelNodeTypeParserRuleCall_4_0() { return cAspectModelTargetModelNodeTypeParserRuleCall_4_0; }

		//targetModel=TargetModelNodeType
		public Assignment getTargetModelAssignment_5() { return cTargetModelAssignment_5; }

		//TargetModelNodeType
		public RuleCall getTargetModelTargetModelNodeTypeParserRuleCall_5_0() { return cTargetModelTargetModelNodeTypeParserRuleCall_5_0; }
	}

	public class GeneratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Generator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGenerateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGeneratorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGeneratorJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cGeneratorAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cSourceModelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSourceModelSourceModelNodeSelectorParserRuleCall_3_0 = (RuleCall)cSourceModelAssignment_3.eContents().get(0);
		private final Assignment cTargetModelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTargetModelTargetModelNodeTypeParserRuleCall_4_0 = (RuleCall)cTargetModelAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cWriteTraceModelAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cWriteTraceModelTraceModelParserRuleCall_5_1_0 = (RuleCall)cWriteTraceModelAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLessThanSignHyphenMinusKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cReadTraceModelsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cReadTraceModelsTraceModelCrossReference_6_1_0 = (CrossReference)cReadTraceModelsAssignment_6_1.eContents().get(0);
		private final RuleCall cReadTraceModelsTraceModelValidIDParserRuleCall_6_1_0_1 = (RuleCall)cReadTraceModelsTraceModelCrossReference_6_1_0.eContents().get(1);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cReadTraceModelsAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final CrossReference cReadTraceModelsTraceModelCrossReference_6_2_1_0 = (CrossReference)cReadTraceModelsAssignment_6_2_1.eContents().get(0);
		private final RuleCall cReadTraceModelsTraceModelValidIDParserRuleCall_6_2_1_0_1 = (RuleCall)cReadTraceModelsTraceModelCrossReference_6_2_1_0.eContents().get(1);
		
		//Generator:
		//	"generate" generator=JvmTypeReference name=ID sourceModel=SourceModelNodeSelector targetModel=TargetModelNodeType
		//	("->" writeTraceModel=TraceModel)? ("<-" readTraceModels+=[TraceModel|ValidID] (","
		//	readTraceModels+=[TraceModel|ValidID])*);
		public ParserRule getRule() { return rule; }

		//"generate" generator=JvmTypeReference name=ID sourceModel=SourceModelNodeSelector targetModel=TargetModelNodeType ("->"
		//writeTraceModel=TraceModel)? ("<-" readTraceModels+=[TraceModel|ValidID] ("," readTraceModels+=[TraceModel|ValidID])*)
		public Group getGroup() { return cGroup; }

		//"generate"
		public Keyword getGenerateKeyword_0() { return cGenerateKeyword_0; }

		//generator=JvmTypeReference
		public Assignment getGeneratorAssignment_1() { return cGeneratorAssignment_1; }

		//JvmTypeReference
		public RuleCall getGeneratorJvmTypeReferenceParserRuleCall_1_0() { return cGeneratorJvmTypeReferenceParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//sourceModel=SourceModelNodeSelector
		public Assignment getSourceModelAssignment_3() { return cSourceModelAssignment_3; }

		//SourceModelNodeSelector
		public RuleCall getSourceModelSourceModelNodeSelectorParserRuleCall_3_0() { return cSourceModelSourceModelNodeSelectorParserRuleCall_3_0; }

		//targetModel=TargetModelNodeType
		public Assignment getTargetModelAssignment_4() { return cTargetModelAssignment_4; }

		//TargetModelNodeType
		public RuleCall getTargetModelTargetModelNodeTypeParserRuleCall_4_0() { return cTargetModelTargetModelNodeTypeParserRuleCall_4_0; }

		//("->" writeTraceModel=TraceModel)?
		public Group getGroup_5() { return cGroup_5; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_5_0() { return cHyphenMinusGreaterThanSignKeyword_5_0; }

		//writeTraceModel=TraceModel
		public Assignment getWriteTraceModelAssignment_5_1() { return cWriteTraceModelAssignment_5_1; }

		//TraceModel
		public RuleCall getWriteTraceModelTraceModelParserRuleCall_5_1_0() { return cWriteTraceModelTraceModelParserRuleCall_5_1_0; }

		//"<-" readTraceModels+=[TraceModel|ValidID] ("," readTraceModels+=[TraceModel|ValidID])*
		public Group getGroup_6() { return cGroup_6; }

		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_6_0() { return cLessThanSignHyphenMinusKeyword_6_0; }

		//readTraceModels+=[TraceModel|ValidID]
		public Assignment getReadTraceModelsAssignment_6_1() { return cReadTraceModelsAssignment_6_1; }

		//[TraceModel|ValidID]
		public CrossReference getReadTraceModelsTraceModelCrossReference_6_1_0() { return cReadTraceModelsTraceModelCrossReference_6_1_0; }

		//ValidID
		public RuleCall getReadTraceModelsTraceModelValidIDParserRuleCall_6_1_0_1() { return cReadTraceModelsTraceModelValidIDParserRuleCall_6_1_0_1; }

		//("," readTraceModels+=[TraceModel|ValidID])*
		public Group getGroup_6_2() { return cGroup_6_2; }

		//","
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }

		//readTraceModels+=[TraceModel|ValidID]
		public Assignment getReadTraceModelsAssignment_6_2_1() { return cReadTraceModelsAssignment_6_2_1; }

		//[TraceModel|ValidID]
		public CrossReference getReadTraceModelsTraceModelCrossReference_6_2_1_0() { return cReadTraceModelsTraceModelCrossReference_6_2_1_0; }

		//ValidID
		public RuleCall getReadTraceModelsTraceModelValidIDParserRuleCall_6_2_1_0_1() { return cReadTraceModelsTraceModelValidIDParserRuleCall_6_2_1_0_1; }
	}

	public class SourceModelNodeSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SourceModelNodeSelector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSourceModelNodeSelectorAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeModelNodeTypeParserRuleCall_0_1_0 = (RuleCall)cTypeAssignment_0_1.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//SourceModelNodeSelector:
		//	{SourceModelNodeSelector} type=ModelNodeType | "null";
		public ParserRule getRule() { return rule; }

		//{SourceModelNodeSelector} type=ModelNodeType | "null"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{SourceModelNodeSelector} type=ModelNodeType
		public Group getGroup_0() { return cGroup_0; }

		//{SourceModelNodeSelector}
		public Action getSourceModelNodeSelectorAction_0_0() { return cSourceModelNodeSelectorAction_0_0; }

		//type=ModelNodeType
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }

		//ModelNodeType
		public RuleCall getTypeModelNodeTypeParserRuleCall_0_1_0() { return cTypeModelNodeTypeParserRuleCall_0_1_0; }

		//"null"
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}

	public class TargetModelNodeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TargetModelNodeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNodeTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNodeTypeModelNodeTypeParserRuleCall_0_0 = (RuleCall)cNodeTypeAssignment_0.eContents().get(0);
		private final Assignment cMultiplyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cMultiplyAsteriskKeyword_1_0 = (Keyword)cMultiplyAssignment_1.eContents().get(0);
		
		//TargetModelNodeType:
		//	nodeType=ModelNodeType multiply?="*"?;
		public ParserRule getRule() { return rule; }

		//nodeType=ModelNodeType multiply?="*"?
		public Group getGroup() { return cGroup; }

		//nodeType=ModelNodeType
		public Assignment getNodeTypeAssignment_0() { return cNodeTypeAssignment_0; }

		//ModelNodeType
		public RuleCall getNodeTypeModelNodeTypeParserRuleCall_0_0() { return cNodeTypeModelNodeTypeParserRuleCall_0_0; }

		//multiply?="*"?
		public Assignment getMultiplyAssignment_1() { return cMultiplyAssignment_1; }

		//"*"
		public Keyword getMultiplyAsteriskKeyword_1_0() { return cMultiplyAsteriskKeyword_1_0; }
	}

	public class ModelNodeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelNodeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTargetMetamodelCrossReference_0_0 = (CrossReference)cTargetAssignment_0.eContents().get(0);
		private final RuleCall cTargetMetamodelValidIDParserRuleCall_0_0_1 = (RuleCall)cTargetMetamodelCrossReference_0_0.eContents().get(1);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeEClassCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeEClassValidIDParserRuleCall_2_0_1 = (RuleCall)cTypeEClassCrossReference_2_0.eContents().get(1);
		
		//ModelNodeType:
		//	target=[Metamodel|ValidID] "/" type=[ecore::EClass|ValidID];
		public ParserRule getRule() { return rule; }

		//target=[Metamodel|ValidID] "/" type=[ecore::EClass|ValidID]
		public Group getGroup() { return cGroup; }

		//target=[Metamodel|ValidID]
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }

		//[Metamodel|ValidID]
		public CrossReference getTargetMetamodelCrossReference_0_0() { return cTargetMetamodelCrossReference_0_0; }

		//ValidID
		public RuleCall getTargetMetamodelValidIDParserRuleCall_0_0_1() { return cTargetMetamodelValidIDParserRuleCall_0_0_1; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//type=[ecore::EClass|ValidID]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[ecore::EClass|ValidID]
		public CrossReference getTypeEClassCrossReference_2_0() { return cTypeEClassCrossReference_2_0; }

		//ValidID
		public RuleCall getTypeEClassValidIDParserRuleCall_2_0_1() { return cTypeEClassValidIDParserRuleCall_2_0_1; }
	}

	public class TraceModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TraceModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNodeSetRelationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNodeSetRelationsNodeSetRelationParserRuleCall_2_0 = (RuleCall)cNodeSetRelationsAssignment_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TraceModel:
		//	name=ValidID "<" nodeSetRelations+=NodeSetRelation+ ">";
		public ParserRule getRule() { return rule; }

		//name=ValidID "<" nodeSetRelations+=NodeSetRelation+ ">"
		public Group getGroup() { return cGroup; }

		//name=ValidID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0() { return cNameValidIDParserRuleCall_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//nodeSetRelations+=NodeSetRelation+
		public Assignment getNodeSetRelationsAssignment_2() { return cNodeSetRelationsAssignment_2; }

		//NodeSetRelation
		public RuleCall getNodeSetRelationsNodeSetRelationParserRuleCall_2_0() { return cNodeSetRelationsNodeSetRelationParserRuleCall_2_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}

	public class NodeSetRelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeSetRelation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceNodesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSourceNodesNodeTypeParserRuleCall_1_0 = (RuleCall)cSourceNodesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSourceNodesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSourceNodesNodeTypeParserRuleCall_2_1_0 = (RuleCall)cSourceNodesAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetNodesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTargetNodesNodeTypeParserRuleCall_4_0 = (RuleCall)cTargetNodesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTargetNodesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTargetNodesNodeTypeParserRuleCall_5_1_0 = (RuleCall)cTargetNodesAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//NodeSetRelation:
		//	"(" sourceNodes+=NodeType ("," sourceNodes+=NodeType)* ":" targetNodes+=NodeType ("," targetNodes+=NodeType)* ")";
		public ParserRule getRule() { return rule; }

		//"(" sourceNodes+=NodeType ("," sourceNodes+=NodeType)* ":" targetNodes+=NodeType ("," targetNodes+=NodeType)* ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//sourceNodes+=NodeType
		public Assignment getSourceNodesAssignment_1() { return cSourceNodesAssignment_1; }

		//NodeType
		public RuleCall getSourceNodesNodeTypeParserRuleCall_1_0() { return cSourceNodesNodeTypeParserRuleCall_1_0; }

		//("," sourceNodes+=NodeType)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//sourceNodes+=NodeType
		public Assignment getSourceNodesAssignment_2_1() { return cSourceNodesAssignment_2_1; }

		//NodeType
		public RuleCall getSourceNodesNodeTypeParserRuleCall_2_1_0() { return cSourceNodesNodeTypeParserRuleCall_2_1_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//targetNodes+=NodeType
		public Assignment getTargetNodesAssignment_4() { return cTargetNodesAssignment_4; }

		//NodeType
		public RuleCall getTargetNodesNodeTypeParserRuleCall_4_0() { return cTargetNodesNodeTypeParserRuleCall_4_0; }

		//("," targetNodes+=NodeType)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//targetNodes+=NodeType
		public Assignment getTargetNodesAssignment_5_1() { return cTargetNodesAssignment_5_1; }

		//NodeType
		public RuleCall getTargetNodesNodeTypeParserRuleCall_5_1_0() { return cTargetNodesNodeTypeParserRuleCall_5_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class NodeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeType");
		private final Assignment cEclassAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cEclassEClassCrossReference_0 = (CrossReference)cEclassAssignment.eContents().get(0);
		private final RuleCall cEclassEClassValidIDParserRuleCall_0_1 = (RuleCall)cEclassEClassCrossReference_0.eContents().get(1);
		
		//NodeType:
		//	eclass=[ecore::EClass|ValidID];
		public ParserRule getRule() { return rule; }

		//eclass=[ecore::EClass|ValidID]
		public Assignment getEclassAssignment() { return cEclassAssignment; }

		//[ecore::EClass|ValidID]
		public CrossReference getEclassEClassCrossReference_0() { return cEclassEClassCrossReference_0; }

		//ValidID
		public RuleCall getEclassEClassValidIDParserRuleCall_0_1() { return cEclassEClassValidIDParserRuleCall_0_1; }
	}
	
	
	private final ModelElements pModel;
	private final MetamodelElements pMetamodel;
	private final ConnectionElements pConnection;
	private final MergerElements pMerger;
	private final GeneratorElements pGenerator;
	private final SourceModelNodeSelectorElements pSourceModelNodeSelector;
	private final TargetModelNodeTypeElements pTargetModelNodeType;
	private final ModelNodeTypeElements pModelNodeType;
	private final TraceModelElements pTraceModel;
	private final NodeSetRelationElements pNodeSetRelation;
	private final NodeTypeElements pNodeType;
	
	private final Grammar grammar;

	private final XbaseGrammarAccess gaXbase;

	@Inject
	public ArchitectureGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.pModel = new ModelElements();
		this.pMetamodel = new MetamodelElements();
		this.pConnection = new ConnectionElements();
		this.pMerger = new MergerElements();
		this.pGenerator = new GeneratorElements();
		this.pSourceModelNodeSelector = new SourceModelNodeSelectorElements();
		this.pTargetModelNodeType = new TargetModelNodeTypeElements();
		this.pModelNodeType = new ModelNodeTypeElements();
		this.pTraceModel = new TraceModelElements();
		this.pNodeSetRelation = new NodeSetRelationElements();
		this.pNodeType = new NodeTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.se.geco.architecture.Architecture".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//Model:
	//	"package" name=QualifiedName importSection=XImportSection? metamodels+=Metamodel+ // prerequisites
	//	// handle results
	//	connections+=Connection*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Metamodel:
	//	"metamodel" name=ValidID (modelPackage=[ecore::EPackage|STRING] | isText?="text" extension=STRING);
	public MetamodelElements getMetamodelAccess() {
		return pMetamodel;
	}
	
	public ParserRule getMetamodelRule() {
		return getMetamodelAccess().getRule();
	}

	//Connection:
	//	Generator | Merger;
	public ConnectionElements getConnectionAccess() {
		return pConnection;
	}
	
	public ParserRule getConnectionRule() {
		return getConnectionAccess().getRule();
	}

	//Merger:
	//	"merge" merger=JvmTypeReference name=ID sourceModel=SourceModelNodeSelector aspectModel=TargetModelNodeType
	//	targetModel=TargetModelNodeType;
	public MergerElements getMergerAccess() {
		return pMerger;
	}
	
	public ParserRule getMergerRule() {
		return getMergerAccess().getRule();
	}

	//Generator:
	//	"generate" generator=JvmTypeReference name=ID sourceModel=SourceModelNodeSelector targetModel=TargetModelNodeType
	//	("->" writeTraceModel=TraceModel)? ("<-" readTraceModels+=[TraceModel|ValidID] (","
	//	readTraceModels+=[TraceModel|ValidID])*);
	public GeneratorElements getGeneratorAccess() {
		return pGenerator;
	}
	
	public ParserRule getGeneratorRule() {
		return getGeneratorAccess().getRule();
	}

	//SourceModelNodeSelector:
	//	{SourceModelNodeSelector} type=ModelNodeType | "null";
	public SourceModelNodeSelectorElements getSourceModelNodeSelectorAccess() {
		return pSourceModelNodeSelector;
	}
	
	public ParserRule getSourceModelNodeSelectorRule() {
		return getSourceModelNodeSelectorAccess().getRule();
	}

	//TargetModelNodeType:
	//	nodeType=ModelNodeType multiply?="*"?;
	public TargetModelNodeTypeElements getTargetModelNodeTypeAccess() {
		return pTargetModelNodeType;
	}
	
	public ParserRule getTargetModelNodeTypeRule() {
		return getTargetModelNodeTypeAccess().getRule();
	}

	//ModelNodeType:
	//	target=[Metamodel|ValidID] "/" type=[ecore::EClass|ValidID];
	public ModelNodeTypeElements getModelNodeTypeAccess() {
		return pModelNodeType;
	}
	
	public ParserRule getModelNodeTypeRule() {
		return getModelNodeTypeAccess().getRule();
	}

	//TraceModel:
	//	name=ValidID "<" nodeSetRelations+=NodeSetRelation+ ">";
	public TraceModelElements getTraceModelAccess() {
		return pTraceModel;
	}
	
	public ParserRule getTraceModelRule() {
		return getTraceModelAccess().getRule();
	}

	//NodeSetRelation:
	//	"(" sourceNodes+=NodeType ("," sourceNodes+=NodeType)* ":" targetNodes+=NodeType ("," targetNodes+=NodeType)* ")";
	public NodeSetRelationElements getNodeSetRelationAccess() {
		return pNodeSetRelation;
	}
	
	public ParserRule getNodeSetRelationRule() {
		return getNodeSetRelationAccess().getRule();
	}

	//NodeType:
	//	eclass=[ecore::EClass|ValidID];
	public NodeTypeElements getNodeTypeAccess() {
		return pNodeType;
	}
	
	public ParserRule getNodeTypeRule() {
		return getNodeTypeAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<" "=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=XExpression ")" | =>
	//	(declaredParam=JvmFormalParameter ":")? switch=XExpression) "{" cases+=XCasePart* ("default" ":" default=XExpression)?
	//	"}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ("case" case=XExpression)? (":" then=XExpression | fallThrough?=",");
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	=> ({XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":") forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression returns XExpression:
	//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
	//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? (=>
	//	explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression:
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)* ">"
	//	(=> ({JvmInnerTypeReference.outer=current} ".") type=[JvmType|ValidID] ("<" arguments+=JvmArgumentTypeReference (","
	//	arguments+=JvmArgumentTypeReference)* ">")?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded returns JvmLowerBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXbase.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?="*" | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXbase.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\""))* "\""? | "\'" ("\\" .
	//	/ * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\'"))* "\'"?;
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
