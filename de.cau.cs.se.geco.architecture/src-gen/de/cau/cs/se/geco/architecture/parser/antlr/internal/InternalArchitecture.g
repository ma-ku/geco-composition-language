/*
* generated by Xtext
*/
grammar InternalArchitecture;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.cau.cs.se.geco.architecture.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.cau.cs.se.geco.architecture.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.cau.cs.se.geco.architecture.services.ArchitectureGrammarAccess;

}

@parser::members {

 	private ArchitectureGrammarAccess grammarAccess;
 	
    public InternalArchitectureParser(TokenStream input, ArchitectureGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected ArchitectureGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='package' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModelAccess().getPackageKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getNameQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='import' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getModelAccess().getImportKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getImportsImportParserRuleCall_3_0()); 
	    }
		lv_imports_3_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_3_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getRegisteredPackagesRegisteredPackageParserRuleCall_4_0()); 
	    }
		lv_registeredPackages_4_0=ruleRegisteredPackage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"registeredPackages",
        		lv_registeredPackages_4_0, 
        		"RegisteredPackage");
	        afterParserOrEnumRuleCall();
	    }

)
)+((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getConnectionsConnectionParserRuleCall_5_0_0()); 
	    }
		lv_connections_5_0=ruleConnection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"connections",
        		lv_connections_5_0, 
        		"Connection");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getMetamodelsMetamodelSequenceParserRuleCall_5_1_0()); 
	    }
		lv_metamodels_6_0=ruleMetamodelSequence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"metamodels",
        		lv_metamodels_6_0, 
        		"MetamodelSequence");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getImportAccess().getWeaverImportParserRuleCall_0()); 
    }
    this_WeaverImport_0=ruleWeaverImport
    { 
        $current = $this_WeaverImport_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getImportAccess().getGeneratorImportParserRuleCall_1()); 
    }
    this_GeneratorImport_1=ruleGeneratorImport
    { 
        $current = $this_GeneratorImport_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleWeaverImport
entryRuleWeaverImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWeaverImportRule()); }
	 iv_ruleWeaverImport=ruleWeaverImport 
	 { $current=$iv_ruleWeaverImport.current; } 
	 EOF 
;

// Rule WeaverImport
ruleWeaverImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='weave' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWeaverImportAccess().getWeaveKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWeaverImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); 
	    }
		lv_importedNamespace_1_0=ruleQualifiedNameWithWildcard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWeaverImportRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_1_0, 
        		"QualifiedNameWithWildcard");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleGeneratorImport
entryRuleGeneratorImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGeneratorImportRule()); }
	 iv_ruleGeneratorImport=ruleGeneratorImport 
	 { $current=$iv_ruleGeneratorImport.current; } 
	 EOF 
;

// Rule GeneratorImport
ruleGeneratorImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='gen' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGeneratorImportAccess().getGenKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGeneratorImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); 
	    }
		lv_importedNamespace_1_0=ruleQualifiedNameWithWildcard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGeneratorImportRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_1_0, 
        		"QualifiedNameWithWildcard");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMetamodelSequence
entryRuleMetamodelSequence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMetamodelSequenceRule()); }
	 iv_ruleMetamodelSequence=ruleMetamodelSequence 
	 { $current=$iv_ruleMetamodelSequence.current; } 
	 EOF 
;

// Rule MetamodelSequence
ruleMetamodelSequence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='model' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMetamodelSequenceAccess().getModelKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMetamodelSequenceAccess().getTypeModelNodeTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleModelNodeType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetamodelSequenceRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"ModelNodeType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMetamodelSequenceAccess().getMetamodelsMetamodelParserRuleCall_2_0()); 
	    }
		lv_metamodels_2_0=ruleMetamodel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetamodelSequenceRule());
	        }
       		add(
       			$current, 
       			"metamodels",
        		lv_metamodels_2_0, 
        		"Metamodel");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMetamodelSequenceAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMetamodelSequenceAccess().getMetamodelsMetamodelParserRuleCall_3_1_0()); 
	    }
		lv_metamodels_4_0=ruleMetamodel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetamodelSequenceRule());
	        }
       		add(
       			$current, 
       			"metamodels",
        		lv_metamodels_4_0, 
        		"Metamodel");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMetamodel
entryRuleMetamodel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMetamodelRule()); }
	 iv_ruleMetamodel=ruleMetamodel 
	 { $current=$iv_ruleMetamodel.current; } 
	 EOF 
;

// Rule Metamodel
ruleMetamodel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getMetamodelAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetamodelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleRegisteredPackage
entryRuleRegisteredPackage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRegisteredPackageRule()); }
	 iv_ruleRegisteredPackage=ruleRegisteredPackage 
	 { $current=$iv_ruleRegisteredPackage.current; } 
	 EOF 
;

// Rule RegisteredPackage
ruleRegisteredPackage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='register' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRegisteredPackageAccess().getRegisterKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRegisteredPackageAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRegisteredPackageRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getRegisteredPackageAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_2_0_0()); 
	    }
		lv_importedNamespace_2_0=ruleQualifiedNameWithWildcard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRegisteredPackageRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_2_0, 
        		"QualifiedNameWithWildcard");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		lv_isText_3_0=	'text' 
    {
        newLeafNode(lv_isText_3_0, grammarAccess.getRegisteredPackageAccess().getIsTextTextKeyword_2_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRegisteredPackageRule());
	        }
       		setWithLastConsumed($current, "isText", true, "text");
	    }

)
)(
(
		lv_extension_4_0=RULE_STRING
		{
			newLeafNode(lv_extension_4_0, grammarAccess.getRegisteredPackageAccess().getExtensionSTRINGTerminalRuleCall_2_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRegisteredPackageRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"extension",
        		lv_extension_4_0, 
        		"STRING");
	    }

)
))))
;





// Entry rule entryRuleConnection
entryRuleConnection returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConnectionRule()); }
	 iv_ruleConnection=ruleConnection 
	 { $current=$iv_ruleConnection.current; } 
	 EOF 
;

// Rule Connection
ruleConnection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConnectionAccess().getGeneratorParserRuleCall_0()); 
    }
    this_Generator_0=ruleGenerator
    { 
        $current = $this_Generator_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConnectionAccess().getWeaverParserRuleCall_1()); 
    }
    this_Weaver_1=ruleWeaver
    { 
        $current = $this_Weaver_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleWeaver
entryRuleWeaver returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWeaverRule()); }
	 iv_ruleWeaver=ruleWeaver 
	 { $current=$iv_ruleWeaver.current; } 
	 EOF 
;

// Rule Weaver
ruleWeaver returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='weave' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWeaverAccess().getWeaveKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getWeaverRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getWeaverAccess().getWeaverWeaverImportCrossReference_1_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getWeaverAccess().getSourceModelSourceModelNodeSelectorParserRuleCall_2_0()); 
	    }
		lv_sourceModel_2_0=ruleSourceModelNodeSelector		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWeaverRule());
	        }
       		set(
       			$current, 
       			"sourceModel",
        		lv_sourceModel_2_0, 
        		"SourceModelNodeSelector");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getWeaverAccess().getAspectModelAspectModelParserRuleCall_3_0()); 
	    }
		lv_aspectModel_3_0=ruleAspectModel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWeaverRule());
	        }
       		set(
       			$current, 
       			"aspectModel",
        		lv_aspectModel_3_0, 
        		"AspectModel");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='=>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getWeaverAccess().getEqualsSignGreaterThanSignKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWeaverAccess().getTargetModelTargetModelNodeTypeParserRuleCall_4_1_0()); 
	    }
		lv_targetModel_5_0=ruleTargetModelNodeType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWeaverRule());
	        }
       		set(
       			$current, 
       			"targetModel",
        		lv_targetModel_5_0, 
        		"TargetModelNodeType");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAspectModel
entryRuleAspectModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAspectModelRule()); }
	 iv_ruleAspectModel=ruleAspectModel 
	 { $current=$iv_ruleAspectModel.current; } 
	 EOF 
;

// Rule AspectModel
ruleAspectModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0=':' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAspectModelAccess().getColonKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getAspectModelAccess().getTargetModelNodeTypeParserRuleCall_0_1()); 
    }
    this_TargetModelNodeType_1=ruleTargetModelNodeType
    { 
        $current = $this_TargetModelNodeType_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getAspectModelAccess().getGeneratorParserRuleCall_1()); 
    }
    this_Generator_2=ruleGenerator
    { 
        $current = $this_Generator_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleGenerator
entryRuleGenerator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGeneratorRule()); }
	 iv_ruleGenerator=ruleGenerator 
	 { $current=$iv_ruleGenerator.current; } 
	 EOF 
;

// Rule Generator
ruleGenerator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='generate' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGeneratorAccess().getGenerateKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGeneratorRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getGeneratorAccess().getGeneratorGeneratorImportCrossReference_1_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGeneratorAccess().getSourceModelSourceModelNodeSelectorParserRuleCall_2_0()); 
	    }
		lv_sourceModel_2_0=ruleSourceModelNodeSelector		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGeneratorRule());
	        }
       		set(
       			$current, 
       			"sourceModel",
        		lv_sourceModel_2_0, 
        		"SourceModelNodeSelector");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGeneratorAccess().getTargetModelTargetModelNodeTypeParserRuleCall_3_0()); 
	    }
		lv_targetModel_3_0=ruleTargetModelNodeType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGeneratorRule());
	        }
       		set(
       			$current, 
       			"targetModel",
        		lv_targetModel_3_0, 
        		"TargetModelNodeType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='->' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getGeneratorAccess().getHyphenMinusGreaterThanSignKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGeneratorAccess().getWriteTraceModelTraceModelParserRuleCall_4_1_0()); 
	    }
		lv_writeTraceModel_5_0=ruleTraceModel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGeneratorRule());
	        }
       		set(
       			$current, 
       			"writeTraceModel",
        		lv_writeTraceModel_5_0, 
        		"TraceModel");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_6='<-' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getGeneratorAccess().getLessThanSignHyphenMinusKeyword_5_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGeneratorRule());
	        }
        }
	otherlv_7=RULE_ID
	{
		newLeafNode(otherlv_7, grammarAccess.getGeneratorAccess().getReadTraceModelsTraceModelCrossReference_5_1_0()); 
	}

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getGeneratorAccess().getCommaKeyword_5_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGeneratorRule());
	        }
        }
	otherlv_9=RULE_ID
	{
		newLeafNode(otherlv_9, grammarAccess.getGeneratorAccess().getReadTraceModelsTraceModelCrossReference_5_2_1_0()); 
	}

)
))*)?)
;





// Entry rule entryRuleSourceModelNodeSelector
entryRuleSourceModelNodeSelector returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSourceModelNodeSelectorRule()); }
	 iv_ruleSourceModelNodeSelector=ruleSourceModelNodeSelector 
	 { $current=$iv_ruleSourceModelNodeSelector.current; } 
	 EOF 
;

// Rule SourceModelNodeSelector
ruleSourceModelNodeSelector returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSourceModelNodeSelectorRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getSourceModelNodeSelectorAccess().getReferenceMetamodelCrossReference_0_0_0()); 
	}

)
)(	otherlv_1='/' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSourceModelNodeSelectorAccess().getSolidusKeyword_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSourceModelNodeSelectorAccess().getPropertyNodePropertyParserRuleCall_0_1_1_0()); 
	    }
		lv_property_2_0=ruleNodeProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSourceModelNodeSelectorRule());
	        }
       		set(
       			$current, 
       			"property",
        		lv_property_2_0, 
        		"NodeProperty");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSourceModelNodeSelectorAccess().getSourceModelNodeSelectorAction_1_0(),
            $current);
    }
)	otherlv_4='null' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSourceModelNodeSelectorAccess().getNullKeyword_1_1());
    }
))
;





// Entry rule entryRuleTargetModelNodeType
entryRuleTargetModelNodeType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTargetModelNodeTypeRule()); }
	 iv_ruleTargetModelNodeType=ruleTargetModelNodeType 
	 { $current=$iv_ruleTargetModelNodeType.current; } 
	 EOF 
;

// Rule TargetModelNodeType
ruleTargetModelNodeType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTargetModelNodeTypeAccess().getTargetModelNodeTypeAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTargetModelNodeTypeRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getTargetModelNodeTypeAccess().getReferenceMetamodelCrossReference_1_0()); 
	}

)
)?(
(
		lv_multiply_2_0=	'*' 
    {
        newLeafNode(lv_multiply_2_0, grammarAccess.getTargetModelNodeTypeAccess().getMultiplyAsteriskKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTargetModelNodeTypeRule());
	        }
       		setWithLastConsumed($current, "multiply", true, "*");
	    }

)
)?)
;





// Entry rule entryRuleModelNodeType
entryRuleModelNodeType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelNodeTypeRule()); }
	 iv_ruleModelNodeType=ruleModelNodeType 
	 { $current=$iv_ruleModelNodeType.current; } 
	 EOF 
;

// Rule ModelNodeType
ruleModelNodeType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getModelNodeTypeRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getModelNodeTypeAccess().getTargetRegisteredPackageCrossReference_0_0()); 
	}

)
)	otherlv_1='/' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModelNodeTypeAccess().getSolidusKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getModelNodeTypeRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getModelNodeTypeAccess().getTypeEClassCrossReference_2_0()); 
	}

)
)(	otherlv_3='/' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getModelNodeTypeAccess().getSolidusKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelNodeTypeAccess().getPropertyNodePropertyParserRuleCall_3_1_0()); 
	    }
		lv_property_4_0=ruleNodeProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelNodeTypeRule());
	        }
       		set(
       			$current, 
       			"property",
        		lv_property_4_0, 
        		"NodeProperty");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleNodeProperty
entryRuleNodeProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodePropertyRule()); }
	 iv_ruleNodeProperty=ruleNodeProperty 
	 { $current=$iv_ruleNodeProperty.current; } 
	 EOF 
;

// Rule NodeProperty
ruleNodeProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodePropertyRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getNodePropertyAccess().getPropertyEReferenceCrossReference_0_0()); 
	}

)
)(	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNodePropertyAccess().getLeftSquareBracketKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodePropertyAccess().getConstraintConstraintExpressionParserRuleCall_1_1_0()); 
	    }
		lv_constraint_2_0=ruleConstraintExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodePropertyRule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_2_0, 
        		"ConstraintExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNodePropertyAccess().getRightSquareBracketKeyword_1_2());
    }
)?(	otherlv_4='/' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNodePropertyAccess().getSolidusKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodePropertyAccess().getSubPropertyNodePropertyParserRuleCall_2_1_0()); 
	    }
		lv_subProperty_5_0=ruleNodeProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodePropertyRule());
	        }
       		set(
       			$current, 
       			"subProperty",
        		lv_subProperty_5_0, 
        		"NodeProperty");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleConstraintExpression
entryRuleConstraintExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstraintExpressionRule()); }
	 iv_ruleConstraintExpression=ruleConstraintExpression 
	 { $current=$iv_ruleConstraintExpression.current; } 
	 EOF 
;

// Rule ConstraintExpression
ruleConstraintExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConstraintExpressionAccess().getCompareExpressionParserRuleCall_0()); 
    }
    this_CompareExpression_0=ruleCompareExpression
    { 
        $current = $this_CompareExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleLogicOperator
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getConstraintExpressionAccess().getConstraintExpressionLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintExpressionAccess().getOperatorLogicOperatorParserRuleCall_1_0_0_1_0()); 
	    }
		lv_operator_2_0=ruleLogicOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"LogicOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintExpressionAccess().getRightConstraintExpressionParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleConstraintExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ConstraintExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleCompareExpression
entryRuleCompareExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompareExpressionRule()); }
	 iv_ruleCompareExpression=ruleCompareExpression 
	 { $current=$iv_ruleCompareExpression.current; } 
	 EOF 
;

// Rule CompareExpression
ruleCompareExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCompareExpressionAccess().getBasicConstraintParserRuleCall_0()); 
    }
    this_BasicConstraint_0=ruleBasicConstraint
    { 
        $current = $this_BasicConstraint_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleComparator
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getCompareExpressionAccess().getConstraintExpressionLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompareExpressionAccess().getOperatorComparatorParserRuleCall_1_0_0_1_0()); 
	    }
		lv_operator_2_0=ruleComparator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompareExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"Comparator");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getCompareExpressionAccess().getRightBasicConstraintParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleBasicConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompareExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BasicConstraint");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleBasicConstraint
entryRuleBasicConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicConstraintRule()); }
	 iv_ruleBasicConstraint=ruleBasicConstraint 
	 { $current=$iv_ruleBasicConstraint.current; } 
	 EOF 
;

// Rule BasicConstraint
ruleBasicConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBasicConstraintAccess().getParenthesisConstraintParserRuleCall_0()); 
    }
    this_ParenthesisConstraint_0=ruleParenthesisConstraint
    { 
        $current = $this_ParenthesisConstraint_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBasicConstraintAccess().getOperandParserRuleCall_1()); 
    }
    this_Operand_1=ruleOperand
    { 
        $current = $this_Operand_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleParenthesisConstraint
entryRuleParenthesisConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParenthesisConstraintRule()); }
	 iv_ruleParenthesisConstraint=ruleParenthesisConstraint 
	 { $current=$iv_ruleParenthesisConstraint.current; } 
	 EOF 
;

// Rule ParenthesisConstraint
ruleParenthesisConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParenthesisConstraintAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParenthesisConstraintAccess().getConstraintConstraintExpressionParserRuleCall_1_0()); 
	    }
		lv_constraint_1_0=ruleConstraintExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParenthesisConstraintRule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_1_0, 
        		"ConstraintExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParenthesisConstraintAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleOperand
entryRuleOperand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperandRule()); }
	 iv_ruleOperand=ruleOperand 
	 { $current=$iv_ruleOperand.current; } 
	 EOF 
;

// Rule Operand
ruleOperand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOperandAccess().getLiteralParserRuleCall_0()); 
    }
    this_Literal_0=ruleLiteral
    { 
        $current = $this_Literal_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getOperandAccess().getNodePropertyParserRuleCall_1()); 
    }
    this_NodeProperty_1=ruleNodeProperty
    { 
        $current = $this_NodeProperty_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTraceModel
entryRuleTraceModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTraceModelRule()); }
	 iv_ruleTraceModel=ruleTraceModel 
	 { $current=$iv_ruleTraceModel.current; } 
	 EOF 
;

// Rule TraceModel
ruleTraceModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getTraceModelAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTraceModelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTraceModelAccess().getLessThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTraceModelAccess().getNodeSetRelationsNodeSetRelationParserRuleCall_2_0()); 
	    }
		lv_nodeSetRelations_2_0=ruleNodeSetRelation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTraceModelRule());
	        }
       		add(
       			$current, 
       			"nodeSetRelations",
        		lv_nodeSetRelations_2_0, 
        		"NodeSetRelation");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_3='>' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTraceModelAccess().getGreaterThanSignKeyword_3());
    }
)
;





// Entry rule entryRuleNodeSetRelation
entryRuleNodeSetRelation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeSetRelationRule()); }
	 iv_ruleNodeSetRelation=ruleNodeSetRelation 
	 { $current=$iv_ruleNodeSetRelation.current; } 
	 EOF 
;

// Rule NodeSetRelation
ruleNodeSetRelation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNodeSetRelationAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeSetRelationAccess().getSourceNodesNodeTypeParserRuleCall_1_0()); 
	    }
		lv_sourceNodes_1_0=ruleNodeType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeSetRelationRule());
	        }
       		add(
       			$current, 
       			"sourceNodes",
        		lv_sourceNodes_1_0, 
        		"NodeType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNodeSetRelationAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeSetRelationAccess().getSourceNodesNodeTypeParserRuleCall_2_1_0()); 
	    }
		lv_sourceNodes_3_0=ruleNodeType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeSetRelationRule());
	        }
       		add(
       			$current, 
       			"sourceNodes",
        		lv_sourceNodes_3_0, 
        		"NodeType");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNodeSetRelationAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeSetRelationAccess().getTargetNodesNodeTypeParserRuleCall_4_0()); 
	    }
		lv_targetNodes_5_0=ruleNodeType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeSetRelationRule());
	        }
       		add(
       			$current, 
       			"targetNodes",
        		lv_targetNodes_5_0, 
        		"NodeType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getNodeSetRelationAccess().getCommaKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeSetRelationAccess().getTargetNodesNodeTypeParserRuleCall_5_1_0()); 
	    }
		lv_targetNodes_7_0=ruleNodeType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeSetRelationRule());
	        }
       		add(
       			$current, 
       			"targetNodes",
        		lv_targetNodes_7_0, 
        		"NodeType");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getNodeSetRelationAccess().getRightParenthesisKeyword_6());
    }
)
;





// Entry rule entryRuleNodeType
entryRuleNodeType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeTypeRule()); }
	 iv_ruleNodeType=ruleNodeType 
	 { $current=$iv_ruleNodeType.current; } 
	 EOF 
;

// Rule NodeType
ruleNodeType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeTypeRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getNodeTypeAccess().getEclassEClassCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_0()); 
    }
    this_StringLiteral_0=ruleStringLiteral
    { 
        $current = $this_StringLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getIntLiteralParserRuleCall_1()); 
    }
    this_IntLiteral_1=ruleIntLiteral
    { 
        $current = $this_IntLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getFloatLiteralParserRuleCall_2()); 
    }
    this_FloatLiteral_2=ruleFloatLiteral
    { 
        $current = $this_FloatLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_3()); 
    }
    this_BooleanLiteral_3=ruleBooleanLiteral
    { 
        $current = $this_BooleanLiteral_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getArrayLiteralParserRuleCall_4()); 
    }
    this_ArrayLiteral_4=ruleArrayLiteral
    { 
        $current = $this_ArrayLiteral_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleArrayLiteral
entryRuleArrayLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayLiteralRule()); }
	 iv_ruleArrayLiteral=ruleArrayLiteral 
	 { $current=$iv_ruleArrayLiteral.current; } 
	 EOF 
;

// Rule ArrayLiteral
ruleArrayLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArrayLiteralAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayLiteralAccess().getLiteralsLiteralParserRuleCall_1_0()); 
	    }
		lv_literals_1_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
	        }
       		add(
       			$current, 
       			"literals",
        		lv_literals_1_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArrayLiteralAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayLiteralAccess().getLiteralsLiteralParserRuleCall_2_1_0()); 
	    }
		lv_literals_3_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
	        }
       		add(
       			$current, 
       			"literals",
        		lv_literals_3_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getArrayLiteralAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current; } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleIntLiteral
entryRuleIntLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntLiteralRule()); }
	 iv_ruleIntLiteral=ruleIntLiteral 
	 { $current=$iv_ruleIntLiteral.current; } 
	 EOF 
;

// Rule IntLiteral
ruleIntLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getIntLiteralAccess().getValueINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleFloatLiteral
entryRuleFloatLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFloatLiteralRule()); }
	 iv_ruleFloatLiteral=ruleFloatLiteral 
	 { $current=$iv_ruleFloatLiteral.current; } 
	 EOF 
;

// Rule FloatLiteral
ruleFloatLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_FLOAT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getFloatLiteralAccess().getValueFLOATTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFloatLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"FLOAT");
	    }

)
)
;





// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); }
	 iv_ruleBooleanLiteral=ruleBooleanLiteral 
	 { $current=$iv_ruleBooleanLiteral.current; } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_BOOLEAN
		{
			newLeafNode(lv_value_0_0, grammarAccess.getBooleanLiteralAccess().getValueBOOLEANTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"BOOLEAN");
	    }

)
)
;





// Entry rule entryRuleLogicOperator
entryRuleLogicOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicOperatorRule()); }
	 iv_ruleLogicOperator=ruleLogicOperator 
	 { $current=$iv_ruleLogicOperator.current; } 
	 EOF 
;

// Rule LogicOperator
ruleLogicOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_AND_0_0=	'&' 
    {
        newLeafNode(lv_AND_0_0, grammarAccess.getLogicOperatorAccess().getANDAmpersandKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLogicOperatorRule());
	        }
       		setWithLastConsumed($current, "AND", lv_AND_0_0, "&");
	    }

)
)
    |(
(
		lv_OR_1_0=	'|' 
    {
        newLeafNode(lv_OR_1_0, grammarAccess.getLogicOperatorAccess().getORVerticalLineKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLogicOperatorRule());
	        }
       		setWithLastConsumed($current, "OR", lv_OR_1_0, "|");
	    }

)
))
;





// Entry rule entryRuleComparator
entryRuleComparator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparatorRule()); }
	 iv_ruleComparator=ruleComparator 
	 { $current=$iv_ruleComparator.current; } 
	 EOF 
;

// Rule Comparator
ruleComparator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_EQ_0_0=	'==' 
    {
        newLeafNode(lv_EQ_0_0, grammarAccess.getComparatorAccess().getEQEqualsSignEqualsSignKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparatorRule());
	        }
       		setWithLastConsumed($current, "EQ", lv_EQ_0_0, "==");
	    }

)
)
    |(
(
		lv_NE_1_0=	'!=' 
    {
        newLeafNode(lv_NE_1_0, grammarAccess.getComparatorAccess().getNEExclamationMarkEqualsSignKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparatorRule());
	        }
       		setWithLastConsumed($current, "NE", lv_NE_1_0, "!=");
	    }

)
)
    |(
(
		lv_GR_2_0=	'>' 
    {
        newLeafNode(lv_GR_2_0, grammarAccess.getComparatorAccess().getGRGreaterThanSignKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparatorRule());
	        }
       		setWithLastConsumed($current, "GR", lv_GR_2_0, ">");
	    }

)
)
    |(
(
		lv_LW_3_0=	'<' 
    {
        newLeafNode(lv_LW_3_0, grammarAccess.getComparatorAccess().getLWLessThanSignKeyword_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparatorRule());
	        }
       		setWithLastConsumed($current, "LW", lv_LW_3_0, "<");
	    }

)
)
    |(
(
		lv_GE_4_0=	'>=' 
    {
        newLeafNode(lv_GE_4_0, grammarAccess.getComparatorAccess().getGEGreaterThanSignEqualsSignKeyword_4_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparatorRule());
	        }
       		setWithLastConsumed($current, "GE", lv_GE_4_0, ">=");
	    }

)
)
    |(
(
		lv_LE_5_0=	'<=' 
    {
        newLeafNode(lv_LE_5_0, grammarAccess.getComparatorAccess().getLELessThanSignEqualsSignKeyword_5_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparatorRule());
	        }
       		setWithLastConsumed($current, "LE", lv_LE_5_0, "<=");
	    }

)
)
    |(
(
		lv_LIKE_6_0=	'~' 
    {
        newLeafNode(lv_LIKE_6_0, grammarAccess.getComparatorAccess().getLIKETildeKeyword_6_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparatorRule());
	        }
       		setWithLastConsumed($current, "LIKE", lv_LIKE_6_0, "~");
	    }

)
))
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(((
	'.' 
)=>
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
)    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); } 
	 iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard 
	 { $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }  
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); 
    }
    this_QualifiedName_0=ruleQualifiedName    {
		$current.merge(this_QualifiedName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopKeyword_1_0()); 
    }

	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getAsteriskKeyword_1_1()); 
    }
)?)
    ;





fragment RULE_DIGIT : '0'..'9';

RULE_INT : '-'? RULE_DIGIT+;

RULE_FLOAT : ('-'? RULE_DIGIT+ '.' RULE_DIGIT* (('e'|'E') ('+'|'-')? RULE_DIGIT+)? 'f'?|'-'? RULE_DIGIT+ 'f');

RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


