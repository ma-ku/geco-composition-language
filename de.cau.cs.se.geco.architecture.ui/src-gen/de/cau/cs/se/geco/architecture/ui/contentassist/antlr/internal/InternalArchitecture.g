/*
 * generated by Xtext
 */
grammar InternalArchitecture;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package de.cau.cs.se.geco.architecture.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.cau.cs.se.geco.architecture.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import de.cau.cs.se.geco.architecture.services.ArchitectureGrammarAccess;

}

@parser::members {
 
 	private ArchitectureGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ArchitectureGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleGecoModel
entryRuleGecoModel 
:
{ before(grammarAccess.getGecoModelRule()); }
	 ruleGecoModel
{ after(grammarAccess.getGecoModelRule()); } 
	 EOF 
;

// Rule GecoModel
ruleGecoModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGecoModelAccess().getGroup()); }
(rule__GecoModel__Group__0)
{ after(grammarAccess.getGecoModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportAccess().getGroup()); }
(rule__Import__Group__0)
{ after(grammarAccess.getImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRegisteredRootClass
entryRuleRegisteredRootClass 
:
{ before(grammarAccess.getRegisteredRootClassRule()); }
	 ruleRegisteredRootClass
{ after(grammarAccess.getRegisteredRootClassRule()); } 
	 EOF 
;

// Rule RegisteredRootClass
ruleRegisteredRootClass
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRegisteredRootClassAccess().getGroup()); }
(rule__RegisteredRootClass__Group__0)
{ after(grammarAccess.getRegisteredRootClassAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleModelSequence
entryRuleModelSequence 
:
{ before(grammarAccess.getModelSequenceRule()); }
	 ruleModelSequence
{ after(grammarAccess.getModelSequenceRule()); } 
	 EOF 
;

// Rule ModelSequence
ruleModelSequence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelSequenceAccess().getGroup()); }
(rule__ModelSequence__Group__0)
{ after(grammarAccess.getModelSequenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getNameAssignment()); }
(rule__Model__NameAssignment)
{ after(grammarAccess.getModelAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFragment
entryRuleFragment 
:
{ before(grammarAccess.getFragmentRule()); }
	 ruleFragment
{ after(grammarAccess.getFragmentRule()); } 
	 EOF 
;

// Rule Fragment
ruleFragment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFragmentAccess().getAlternatives()); }
(rule__Fragment__Alternatives)
{ after(grammarAccess.getFragmentAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWeaver
entryRuleWeaver 
:
{ before(grammarAccess.getWeaverRule()); }
	 ruleWeaver
{ after(grammarAccess.getWeaverRule()); } 
	 EOF 
;

// Rule Weaver
ruleWeaver
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWeaverAccess().getGroup()); }
(rule__Weaver__Group__0)
{ after(grammarAccess.getWeaverAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAspectModel
entryRuleAspectModel 
:
{ before(grammarAccess.getAspectModelRule()); }
	 ruleAspectModel
{ after(grammarAccess.getAspectModelRule()); } 
	 EOF 
;

// Rule AspectModel
ruleAspectModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAspectModelAccess().getAlternatives()); }
(rule__AspectModel__Alternatives)
{ after(grammarAccess.getAspectModelAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSeparateModels
entryRuleSeparateModels 
:
{ before(grammarAccess.getSeparateModelsRule()); }
	 ruleSeparateModels
{ after(grammarAccess.getSeparateModelsRule()); } 
	 EOF 
;

// Rule SeparateModels
ruleSeparateModels
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSeparateModelsAccess().getGroup()); }
(rule__SeparateModels__Group__0)
{ after(grammarAccess.getSeparateModelsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCombinedModel
entryRuleCombinedModel 
:
{ before(grammarAccess.getCombinedModelRule()); }
	 ruleCombinedModel
{ after(grammarAccess.getCombinedModelRule()); } 
	 EOF 
;

// Rule CombinedModel
ruleCombinedModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCombinedModelAccess().getAlternatives()); }
(rule__CombinedModel__Alternatives)
{ after(grammarAccess.getCombinedModelAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGenerator
entryRuleGenerator 
:
{ before(grammarAccess.getGeneratorRule()); }
	 ruleGenerator
{ after(grammarAccess.getGeneratorRule()); } 
	 EOF 
;

// Rule Generator
ruleGenerator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGeneratorAccess().getGroup()); }
(rule__Generator__Group__0)
{ after(grammarAccess.getGeneratorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSourceModelSelector
entryRuleSourceModelSelector 
:
{ before(grammarAccess.getSourceModelSelectorRule()); }
	 ruleSourceModelSelector
{ after(grammarAccess.getSourceModelSelectorRule()); } 
	 EOF 
;

// Rule SourceModelSelector
ruleSourceModelSelector
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSourceModelSelectorAccess().getAlternatives()); }
(rule__SourceModelSelector__Alternatives)
{ after(grammarAccess.getSourceModelSelectorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTargetModel
entryRuleTargetModel 
:
{ before(grammarAccess.getTargetModelRule()); }
	 ruleTargetModel
{ after(grammarAccess.getTargetModelRule()); } 
	 EOF 
;

// Rule TargetModel
ruleTargetModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTargetModelAccess().getGroup()); }
(rule__TargetModel__Group__0)
{ after(grammarAccess.getTargetModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleModelType
entryRuleModelType 
:
{ before(grammarAccess.getModelTypeRule()); }
	 ruleModelType
{ after(grammarAccess.getModelTypeRule()); } 
	 EOF 
;

// Rule ModelType
ruleModelType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelTypeAccess().getGroup()); }
(rule__ModelType__Group__0)
{ after(grammarAccess.getModelTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNodeProperty
entryRuleNodeProperty 
:
{ before(grammarAccess.getNodePropertyRule()); }
	 ruleNodeProperty
{ after(grammarAccess.getNodePropertyRule()); } 
	 EOF 
;

// Rule NodeProperty
ruleNodeProperty
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNodePropertyAccess().getGroup()); }
(rule__NodeProperty__Group__0)
{ after(grammarAccess.getNodePropertyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstraintExpression
entryRuleConstraintExpression 
:
{ before(grammarAccess.getConstraintExpressionRule()); }
	 ruleConstraintExpression
{ after(grammarAccess.getConstraintExpressionRule()); } 
	 EOF 
;

// Rule ConstraintExpression
ruleConstraintExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstraintExpressionAccess().getGroup()); }
(rule__ConstraintExpression__Group__0)
{ after(grammarAccess.getConstraintExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompareExpression
entryRuleCompareExpression 
:
{ before(grammarAccess.getCompareExpressionRule()); }
	 ruleCompareExpression
{ after(grammarAccess.getCompareExpressionRule()); } 
	 EOF 
;

// Rule CompareExpression
ruleCompareExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompareExpressionAccess().getGroup()); }
(rule__CompareExpression__Group__0)
{ after(grammarAccess.getCompareExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBasicConstraint
entryRuleBasicConstraint 
:
{ before(grammarAccess.getBasicConstraintRule()); }
	 ruleBasicConstraint
{ after(grammarAccess.getBasicConstraintRule()); } 
	 EOF 
;

// Rule BasicConstraint
ruleBasicConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBasicConstraintAccess().getAlternatives()); }
(rule__BasicConstraint__Alternatives)
{ after(grammarAccess.getBasicConstraintAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNegation
entryRuleNegation 
:
{ before(grammarAccess.getNegationRule()); }
	 ruleNegation
{ after(grammarAccess.getNegationRule()); } 
	 EOF 
;

// Rule Negation
ruleNegation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNegationAccess().getGroup()); }
(rule__Negation__Group__0)
{ after(grammarAccess.getNegationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParenthesisConstraint
entryRuleParenthesisConstraint 
:
{ before(grammarAccess.getParenthesisConstraintRule()); }
	 ruleParenthesisConstraint
{ after(grammarAccess.getParenthesisConstraintRule()); } 
	 EOF 
;

// Rule ParenthesisConstraint
ruleParenthesisConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParenthesisConstraintAccess().getGroup()); }
(rule__ParenthesisConstraint__Group__0)
{ after(grammarAccess.getParenthesisConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperand
entryRuleOperand 
:
{ before(grammarAccess.getOperandRule()); }
	 ruleOperand
{ after(grammarAccess.getOperandRule()); } 
	 EOF 
;

// Rule Operand
ruleOperand
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperandAccess().getAlternatives()); }
(rule__Operand__Alternatives)
{ after(grammarAccess.getOperandAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInstanceOf
entryRuleInstanceOf 
:
{ before(grammarAccess.getInstanceOfRule()); }
	 ruleInstanceOf
{ after(grammarAccess.getInstanceOfRule()); } 
	 EOF 
;

// Rule InstanceOf
ruleInstanceOf
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInstanceOfAccess().getGroup()); }
(rule__InstanceOf__Group__0)
{ after(grammarAccess.getInstanceOfAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTargetTraceModel
entryRuleTargetTraceModel 
:
{ before(grammarAccess.getTargetTraceModelRule()); }
	 ruleTargetTraceModel
{ after(grammarAccess.getTargetTraceModelRule()); } 
	 EOF 
;

// Rule TargetTraceModel
ruleTargetTraceModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTargetTraceModelAccess().getAlternatives()); }
(rule__TargetTraceModel__Alternatives)
{ after(grammarAccess.getTargetTraceModelAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTraceModelReference
entryRuleTraceModelReference 
:
{ before(grammarAccess.getTraceModelReferenceRule()); }
	 ruleTraceModelReference
{ after(grammarAccess.getTraceModelReferenceRule()); } 
	 EOF 
;

// Rule TraceModelReference
ruleTraceModelReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTraceModelReferenceAccess().getTraceModelAssignment()); }
(rule__TraceModelReference__TraceModelAssignment)
{ after(grammarAccess.getTraceModelReferenceAccess().getTraceModelAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTraceModel
entryRuleTraceModel 
:
{ before(grammarAccess.getTraceModelRule()); }
	 ruleTraceModel
{ after(grammarAccess.getTraceModelRule()); } 
	 EOF 
;

// Rule TraceModel
ruleTraceModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTraceModelAccess().getGroup()); }
(rule__TraceModel__Group__0)
{ after(grammarAccess.getTraceModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNodeSetRelation
entryRuleNodeSetRelation 
:
{ before(grammarAccess.getNodeSetRelationRule()); }
	 ruleNodeSetRelation
{ after(grammarAccess.getNodeSetRelationRule()); } 
	 EOF 
;

// Rule NodeSetRelation
ruleNodeSetRelation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNodeSetRelationAccess().getGroup()); }
(rule__NodeSetRelation__Group__0)
{ after(grammarAccess.getNodeSetRelationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNodeType
entryRuleNodeType 
:
{ before(grammarAccess.getNodeTypeRule()); }
	 ruleNodeType
{ after(grammarAccess.getNodeTypeRule()); } 
	 EOF 
;

// Rule NodeType
ruleNodeType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNodeTypeAccess().getTypeAssignment()); }
(rule__NodeType__TypeAssignment)
{ after(grammarAccess.getNodeTypeAccess().getTypeAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArrayLiteral
entryRuleArrayLiteral 
:
{ before(grammarAccess.getArrayLiteralRule()); }
	 ruleArrayLiteral
{ after(grammarAccess.getArrayLiteralRule()); } 
	 EOF 
;

// Rule ArrayLiteral
ruleArrayLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayLiteralAccess().getGroup()); }
(rule__ArrayLiteral__Group__0)
{ after(grammarAccess.getArrayLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringLiteral
entryRuleStringLiteral 
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
(rule__StringLiteral__ValueAssignment)
{ after(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntLiteral
entryRuleIntLiteral 
:
{ before(grammarAccess.getIntLiteralRule()); }
	 ruleIntLiteral
{ after(grammarAccess.getIntLiteralRule()); } 
	 EOF 
;

// Rule IntLiteral
ruleIntLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntLiteralAccess().getValueAssignment()); }
(rule__IntLiteral__ValueAssignment)
{ after(grammarAccess.getIntLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFloatLiteral
entryRuleFloatLiteral 
:
{ before(grammarAccess.getFloatLiteralRule()); }
	 ruleFloatLiteral
{ after(grammarAccess.getFloatLiteralRule()); } 
	 EOF 
;

// Rule FloatLiteral
ruleFloatLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFloatLiteralAccess().getValueAssignment()); }
(rule__FloatLiteral__ValueAssignment)
{ after(grammarAccess.getFloatLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral 
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanLiteralAccess().getValueAssignment()); }
(rule__BooleanLiteral__ValueAssignment)
{ after(grammarAccess.getBooleanLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






// Rule ModelModifier
ruleModelModifier
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelModifierAccess().getAlternatives()); }
(rule__ModelModifier__Alternatives)
{ after(grammarAccess.getModelModifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule LogicOperator
ruleLogicOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicOperatorAccess().getAlternatives()); }
(rule__LogicOperator__Alternatives)
{ after(grammarAccess.getLogicOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule Comparator
ruleComparator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparatorAccess().getAlternatives()); }
(rule__Comparator__Alternatives)
{ after(grammarAccess.getComparatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__RegisteredRootClass__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegisteredRootClassAccess().getImportedNamespaceAssignment_2_0()); }
(rule__RegisteredRootClass__ImportedNamespaceAssignment_2_0)
{ after(grammarAccess.getRegisteredRootClassAccess().getImportedNamespaceAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getRegisteredRootClassAccess().getGroup_2_1()); }
(rule__RegisteredRootClass__Group_2_1__0)
{ after(grammarAccess.getRegisteredRootClassAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fragment__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFragmentAccess().getGeneratorParserRuleCall_0()); }
	ruleGenerator
{ after(grammarAccess.getFragmentAccess().getGeneratorParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFragmentAccess().getWeaverParserRuleCall_1()); }
	ruleWeaver
{ after(grammarAccess.getFragmentAccess().getWeaverParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Weaver__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWeaverAccess().getSourceModelAssignment_2_0()); }
(rule__Weaver__SourceModelAssignment_2_0)
{ after(grammarAccess.getWeaverAccess().getSourceModelAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getWeaverAccess().getLinkKeyword_2_1()); }

	'link' 

{ after(grammarAccess.getWeaverAccess().getLinkKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AspectModel__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAspectModelAccess().getCombinedModelParserRuleCall_0()); }
	ruleCombinedModel
{ after(grammarAccess.getAspectModelAccess().getCombinedModelParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAspectModelAccess().getSeparateModelsParserRuleCall_1()); }
	ruleSeparateModels
{ after(grammarAccess.getAspectModelAccess().getSeparateModelsParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CombinedModel__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCombinedModelAccess().getTargetModelParserRuleCall_0()); }
	ruleTargetModel
{ after(grammarAccess.getCombinedModelAccess().getTargetModelParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getCombinedModelAccess().getGeneratorParserRuleCall_1()); }
	ruleGenerator
{ after(grammarAccess.getCombinedModelAccess().getGeneratorParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SourceModelSelector__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceModelSelectorAccess().getGroup_0()); }
(rule__SourceModelSelector__Group_0__0)
{ after(grammarAccess.getSourceModelSelectorAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getSourceModelSelectorAccess().getGroup_1()); }
(rule__SourceModelSelector__Group_1__0)
{ after(grammarAccess.getSourceModelSelectorAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BasicConstraint__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicConstraintAccess().getParenthesisConstraintParserRuleCall_0()); }
	ruleParenthesisConstraint
{ after(grammarAccess.getBasicConstraintAccess().getParenthesisConstraintParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBasicConstraintAccess().getOperandParserRuleCall_1()); }
	ruleOperand
{ after(grammarAccess.getBasicConstraintAccess().getOperandParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getBasicConstraintAccess().getNegationParserRuleCall_2()); }
	ruleNegation
{ after(grammarAccess.getBasicConstraintAccess().getNegationParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getLiteralParserRuleCall_0()); }
	ruleLiteral
{ after(grammarAccess.getOperandAccess().getLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getOperandAccess().getNodePropertyParserRuleCall_1()); }
	ruleNodeProperty
{ after(grammarAccess.getOperandAccess().getNodePropertyParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getOperandAccess().getInstanceOfParserRuleCall_2()); }
	ruleInstanceOf
{ after(grammarAccess.getOperandAccess().getInstanceOfParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TargetTraceModel__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetTraceModelAccess().getTraceModelParserRuleCall_0()); }
	ruleTraceModel
{ after(grammarAccess.getTargetTraceModelAccess().getTraceModelParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTargetTraceModelAccess().getGroup_1()); }
(rule__TargetTraceModel__Group_1__0)
{ after(grammarAccess.getTargetTraceModelAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_0()); }
	ruleStringLiteral
{ after(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getIntLiteralParserRuleCall_1()); }
	ruleIntLiteral
{ after(grammarAccess.getLiteralAccess().getIntLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getFloatLiteralParserRuleCall_2()); }
	ruleFloatLiteral
{ after(grammarAccess.getLiteralAccess().getFloatLiteralParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_3()); }
	ruleBooleanLiteral
{ after(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getArrayLiteralParserRuleCall_4()); }
	ruleArrayLiteral
{ after(grammarAccess.getLiteralAccess().getArrayLiteralParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModelModifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelModifierAccess().getINPUTEnumLiteralDeclaration_0()); }
(	'in' 
)
{ after(grammarAccess.getModelModifierAccess().getINPUTEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getModelModifierAccess().getOUTPUTEnumLiteralDeclaration_1()); }
(	'out' 
)
{ after(grammarAccess.getModelModifierAccess().getOUTPUTEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getModelModifierAccess().getINTERMEDIATEEnumLiteralDeclaration_2()); }
(	'io' 
)
{ after(grammarAccess.getModelModifierAccess().getINTERMEDIATEEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicOperatorAccess().getANDEnumLiteralDeclaration_0()); }
(	'&' 
)
{ after(grammarAccess.getLogicOperatorAccess().getANDEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getLogicOperatorAccess().getOREnumLiteralDeclaration_1()); }
(	'|' 
)
{ after(grammarAccess.getLogicOperatorAccess().getOREnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparatorAccess().getEQEnumLiteralDeclaration_0()); }
(	'==' 
)
{ after(grammarAccess.getComparatorAccess().getEQEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getComparatorAccess().getNEEnumLiteralDeclaration_1()); }
(	'!=' 
)
{ after(grammarAccess.getComparatorAccess().getNEEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getComparatorAccess().getGREnumLiteralDeclaration_2()); }
(	'>' 
)
{ after(grammarAccess.getComparatorAccess().getGREnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getComparatorAccess().getLWEnumLiteralDeclaration_3()); }
(	'<' 
)
{ after(grammarAccess.getComparatorAccess().getLWEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getComparatorAccess().getGEEnumLiteralDeclaration_4()); }
(	'>=' 
)
{ after(grammarAccess.getComparatorAccess().getGEEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getComparatorAccess().getLEEnumLiteralDeclaration_5()); }
(	'<=' 
)
{ after(grammarAccess.getComparatorAccess().getLEEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getComparatorAccess().getLIKEEnumLiteralDeclaration_6()); }
(	'~' 
)
{ after(grammarAccess.getComparatorAccess().getLIKEEnumLiteralDeclaration_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__GecoModel__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GecoModel__Group__0__Impl
	rule__GecoModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GecoModel__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGecoModelAccess().getPackageKeyword_0()); }

	'package' 

{ after(grammarAccess.getGecoModelAccess().getPackageKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GecoModel__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GecoModel__Group__1__Impl
	rule__GecoModel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GecoModel__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGecoModelAccess().getNameAssignment_1()); }
(rule__GecoModel__NameAssignment_1)
{ after(grammarAccess.getGecoModelAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GecoModel__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GecoModel__Group__2__Impl
	rule__GecoModel__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GecoModel__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGecoModelAccess().getImportsAssignment_2()); }
(rule__GecoModel__ImportsAssignment_2)*
{ after(grammarAccess.getGecoModelAccess().getImportsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GecoModel__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GecoModel__Group__3__Impl
	rule__GecoModel__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__GecoModel__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGecoModelAccess().getRegisteredRootClassAssignment_3()); }
(rule__GecoModel__RegisteredRootClassAssignment_3)*
{ after(grammarAccess.getGecoModelAccess().getRegisteredRootClassAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GecoModel__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GecoModel__Group__4__Impl
	rule__GecoModel__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__GecoModel__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGecoModelAccess().getModelsAssignment_4()); }
(rule__GecoModel__ModelsAssignment_4)*
{ after(grammarAccess.getGecoModelAccess().getModelsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GecoModel__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GecoModel__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GecoModel__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGecoModelAccess().getFragmentsAssignment_5()); }
(rule__GecoModel__FragmentsAssignment_5)*
{ after(grammarAccess.getGecoModelAccess().getFragmentsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Import__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
(rule__Import__ImportedNamespaceAssignment_1)
{ after(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RegisteredRootClass__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegisteredRootClass__Group__0__Impl
	rule__RegisteredRootClass__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegisteredRootClass__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegisteredRootClassAccess().getRegisterKeyword_0()); }

	'register' 

{ after(grammarAccess.getRegisteredRootClassAccess().getRegisterKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RegisteredRootClass__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegisteredRootClass__Group__1__Impl
	rule__RegisteredRootClass__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RegisteredRootClass__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegisteredRootClassAccess().getNameAssignment_1()); }
(rule__RegisteredRootClass__NameAssignment_1)
{ after(grammarAccess.getRegisteredRootClassAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RegisteredRootClass__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegisteredRootClass__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegisteredRootClass__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegisteredRootClassAccess().getAlternatives_2()); }
(rule__RegisteredRootClass__Alternatives_2)
{ after(grammarAccess.getRegisteredRootClassAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RegisteredRootClass__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegisteredRootClass__Group_2_1__0__Impl
	rule__RegisteredRootClass__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegisteredRootClass__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegisteredRootClassAccess().getIsTextAssignment_2_1_0()); }
(rule__RegisteredRootClass__IsTextAssignment_2_1_0)
{ after(grammarAccess.getRegisteredRootClassAccess().getIsTextAssignment_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RegisteredRootClass__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegisteredRootClass__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegisteredRootClass__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegisteredRootClassAccess().getExtensionAssignment_2_1_1()); }
(rule__RegisteredRootClass__ExtensionAssignment_2_1_1)
{ after(grammarAccess.getRegisteredRootClassAccess().getExtensionAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ModelSequence__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModelSequence__Group__0__Impl
	rule__ModelSequence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelSequence__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelSequenceAccess().getModelKeyword_0()); }

	'model' 

{ after(grammarAccess.getModelSequenceAccess().getModelKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModelSequence__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModelSequence__Group__1__Impl
	rule__ModelSequence__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelSequence__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelSequenceAccess().getModifierAssignment_1()); }
(rule__ModelSequence__ModifierAssignment_1)
{ after(grammarAccess.getModelSequenceAccess().getModifierAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModelSequence__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModelSequence__Group__2__Impl
	rule__ModelSequence__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelSequence__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelSequenceAccess().getTypeAssignment_2()); }
(rule__ModelSequence__TypeAssignment_2)
{ after(grammarAccess.getModelSequenceAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModelSequence__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModelSequence__Group__3__Impl
	rule__ModelSequence__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelSequence__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelSequenceAccess().getModelsAssignment_3()); }
(rule__ModelSequence__ModelsAssignment_3)
{ after(grammarAccess.getModelSequenceAccess().getModelsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModelSequence__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModelSequence__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelSequence__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelSequenceAccess().getGroup_4()); }
(rule__ModelSequence__Group_4__0)*
{ after(grammarAccess.getModelSequenceAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ModelSequence__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModelSequence__Group_4__0__Impl
	rule__ModelSequence__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelSequence__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelSequenceAccess().getCommaKeyword_4_0()); }

	',' 

{ after(grammarAccess.getModelSequenceAccess().getCommaKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModelSequence__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModelSequence__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelSequence__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelSequenceAccess().getModelsAssignment_4_1()); }
(rule__ModelSequence__ModelsAssignment_4_1)
{ after(grammarAccess.getModelSequenceAccess().getModelsAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Weaver__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Weaver__Group__0__Impl
	rule__Weaver__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Weaver__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWeaverAccess().getWeaveKeyword_0()); }

	'weave' 

{ after(grammarAccess.getWeaverAccess().getWeaveKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Weaver__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Weaver__Group__1__Impl
	rule__Weaver__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Weaver__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWeaverAccess().getReferenceAssignment_1()); }
(rule__Weaver__ReferenceAssignment_1)
{ after(grammarAccess.getWeaverAccess().getReferenceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Weaver__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Weaver__Group__2__Impl
	rule__Weaver__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Weaver__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWeaverAccess().getAlternatives_2()); }
(rule__Weaver__Alternatives_2)
{ after(grammarAccess.getWeaverAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Weaver__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Weaver__Group__3__Impl
	rule__Weaver__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Weaver__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWeaverAccess().getAspectModelAssignment_3()); }
(rule__Weaver__AspectModelAssignment_3)
{ after(grammarAccess.getWeaverAccess().getAspectModelAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Weaver__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Weaver__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Weaver__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWeaverAccess().getGroup_4()); }
(rule__Weaver__Group_4__0)?
{ after(grammarAccess.getWeaverAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Weaver__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Weaver__Group_4__0__Impl
	rule__Weaver__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Weaver__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWeaverAccess().getEqualsSignGreaterThanSignKeyword_4_0()); }

	'=>' 

{ after(grammarAccess.getWeaverAccess().getEqualsSignGreaterThanSignKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Weaver__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Weaver__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Weaver__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWeaverAccess().getTargetModelAssignment_4_1()); }
(rule__Weaver__TargetModelAssignment_4_1)
{ after(grammarAccess.getWeaverAccess().getTargetModelAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SeparateModels__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SeparateModels__Group__0__Impl
	rule__SeparateModels__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SeparateModels__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeparateModelsAccess().getPointcutKeyword_0()); }

	'pointcut' 

{ after(grammarAccess.getSeparateModelsAccess().getPointcutKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SeparateModels__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SeparateModels__Group__1__Impl
	rule__SeparateModels__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SeparateModels__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeparateModelsAccess().getPointcutAssignment_1()); }
(rule__SeparateModels__PointcutAssignment_1)
{ after(grammarAccess.getSeparateModelsAccess().getPointcutAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SeparateModels__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SeparateModels__Group__2__Impl
	rule__SeparateModels__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SeparateModels__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeparateModelsAccess().getAdviceKeyword_2()); }

	'advice' 

{ after(grammarAccess.getSeparateModelsAccess().getAdviceKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SeparateModels__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SeparateModels__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SeparateModels__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeparateModelsAccess().getAdviceAssignment_3()); }
(rule__SeparateModels__AdviceAssignment_3)
{ after(grammarAccess.getSeparateModelsAccess().getAdviceAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Generator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group__0__Impl
	rule__Generator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getGenerateKeyword_0()); }

	'generate' 

{ after(grammarAccess.getGeneratorAccess().getGenerateKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group__1__Impl
	rule__Generator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getReferenceAssignment_1()); }
(rule__Generator__ReferenceAssignment_1)
{ after(grammarAccess.getGeneratorAccess().getReferenceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group__2__Impl
	rule__Generator__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getGroup_2()); }
(rule__Generator__Group_2__0)?
{ after(grammarAccess.getGeneratorAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group__3__Impl
	rule__Generator__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getSourceKeyword_3()); }

	'source' 

{ after(grammarAccess.getGeneratorAccess().getSourceKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group__4__Impl
	rule__Generator__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getSourceModelAssignment_4()); }
(rule__Generator__SourceModelAssignment_4)
{ after(grammarAccess.getGeneratorAccess().getSourceModelAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group__5__Impl
	rule__Generator__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getGroup_5()); }
(rule__Generator__Group_5__0)?
{ after(grammarAccess.getGeneratorAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getGroup_6()); }
(rule__Generator__Group_6__0)?
{ after(grammarAccess.getGeneratorAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Generator__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_2__0__Impl
	rule__Generator__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getGeneratorAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_2__1__Impl
	rule__Generator__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getSourceAuxModelsAssignment_2_1()); }
(rule__Generator__SourceAuxModelsAssignment_2_1)
{ after(grammarAccess.getGeneratorAccess().getSourceAuxModelsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_2__2__Impl
	rule__Generator__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getGroup_2_2()); }
(rule__Generator__Group_2_2__0)*
{ after(grammarAccess.getGeneratorAccess().getGroup_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getRightParenthesisKeyword_2_3()); }

	')' 

{ after(grammarAccess.getGeneratorAccess().getRightParenthesisKeyword_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Generator__Group_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_2_2__0__Impl
	rule__Generator__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getCommaKeyword_2_2_0()); }

	',' 

{ after(grammarAccess.getGeneratorAccess().getCommaKeyword_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getSourceAuxModelsAssignment_2_2_1()); }
(rule__Generator__SourceAuxModelsAssignment_2_2_1)
{ after(grammarAccess.getGeneratorAccess().getSourceAuxModelsAssignment_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Generator__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_5__0__Impl
	rule__Generator__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getTargetKeyword_5_0()); }

	'target' 

{ after(grammarAccess.getGeneratorAccess().getTargetKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getTargetModelAssignment_5_1()); }
(rule__Generator__TargetModelAssignment_5_1)
{ after(grammarAccess.getGeneratorAccess().getTargetModelAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Generator__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_6__0__Impl
	rule__Generator__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getTraceKeyword_6_0()); }

	'trace' 

{ after(grammarAccess.getGeneratorAccess().getTraceKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_6__1__Impl
	rule__Generator__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getGroup_6_1()); }
(rule__Generator__Group_6_1__0)?
{ after(grammarAccess.getGeneratorAccess().getGroup_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group_6__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_6__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_6__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getGroup_6_2()); }
(rule__Generator__Group_6_2__0)?
{ after(grammarAccess.getGeneratorAccess().getGroup_6_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Generator__Group_6_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_6_1__0__Impl
	rule__Generator__Group_6_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_6_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getOutKeyword_6_1_0()); }

	'out' 

{ after(grammarAccess.getGeneratorAccess().getOutKeyword_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group_6_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_6_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_6_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getTargetTraceModelAssignment_6_1_1()); }
(rule__Generator__TargetTraceModelAssignment_6_1_1)
{ after(grammarAccess.getGeneratorAccess().getTargetTraceModelAssignment_6_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Generator__Group_6_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_6_2__0__Impl
	rule__Generator__Group_6_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_6_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getInKeyword_6_2_0()); }

	'in' 

{ after(grammarAccess.getGeneratorAccess().getInKeyword_6_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group_6_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_6_2__1__Impl
	rule__Generator__Group_6_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_6_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getSourceTraceModelsAssignment_6_2_1()); }
(rule__Generator__SourceTraceModelsAssignment_6_2_1)
{ after(grammarAccess.getGeneratorAccess().getSourceTraceModelsAssignment_6_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group_6_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_6_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_6_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getGroup_6_2_2()); }
(rule__Generator__Group_6_2_2__0)*
{ after(grammarAccess.getGeneratorAccess().getGroup_6_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Generator__Group_6_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_6_2_2__0__Impl
	rule__Generator__Group_6_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_6_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getCommaKeyword_6_2_2_0()); }

	',' 

{ after(grammarAccess.getGeneratorAccess().getCommaKeyword_6_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group_6_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generator__Group_6_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group_6_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getSourceTraceModelsAssignment_6_2_2_1()); }
(rule__Generator__SourceTraceModelsAssignment_6_2_2_1)
{ after(grammarAccess.getGeneratorAccess().getSourceTraceModelsAssignment_6_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SourceModelSelector__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SourceModelSelector__Group_0__0__Impl
	rule__SourceModelSelector__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceModelSelector__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceModelSelectorAccess().getReferenceAssignment_0_0()); }
(rule__SourceModelSelector__ReferenceAssignment_0_0)
{ after(grammarAccess.getSourceModelSelectorAccess().getReferenceAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SourceModelSelector__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SourceModelSelector__Group_0__1__Impl
	rule__SourceModelSelector__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceModelSelector__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceModelSelectorAccess().getGroup_0_1()); }
(rule__SourceModelSelector__Group_0_1__0)?
{ after(grammarAccess.getSourceModelSelectorAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SourceModelSelector__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SourceModelSelector__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceModelSelector__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceModelSelectorAccess().getGroup_0_2()); }
(rule__SourceModelSelector__Group_0_2__0)?
{ after(grammarAccess.getSourceModelSelectorAccess().getGroup_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SourceModelSelector__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SourceModelSelector__Group_0_1__0__Impl
	rule__SourceModelSelector__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceModelSelector__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceModelSelectorAccess().getLeftSquareBracketKeyword_0_1_0()); }

	'[' 

{ after(grammarAccess.getSourceModelSelectorAccess().getLeftSquareBracketKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SourceModelSelector__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SourceModelSelector__Group_0_1__1__Impl
	rule__SourceModelSelector__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceModelSelector__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceModelSelectorAccess().getConstraintAssignment_0_1_1()); }
(rule__SourceModelSelector__ConstraintAssignment_0_1_1)
{ after(grammarAccess.getSourceModelSelectorAccess().getConstraintAssignment_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SourceModelSelector__Group_0_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SourceModelSelector__Group_0_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceModelSelector__Group_0_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceModelSelectorAccess().getRightSquareBracketKeyword_0_1_2()); }

	']' 

{ after(grammarAccess.getSourceModelSelectorAccess().getRightSquareBracketKeyword_0_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SourceModelSelector__Group_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SourceModelSelector__Group_0_2__0__Impl
	rule__SourceModelSelector__Group_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceModelSelector__Group_0_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceModelSelectorAccess().getSolidusKeyword_0_2_0()); }

	'/' 

{ after(grammarAccess.getSourceModelSelectorAccess().getSolidusKeyword_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SourceModelSelector__Group_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SourceModelSelector__Group_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceModelSelector__Group_0_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceModelSelectorAccess().getPropertyAssignment_0_2_1()); }
(rule__SourceModelSelector__PropertyAssignment_0_2_1)
{ after(grammarAccess.getSourceModelSelectorAccess().getPropertyAssignment_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SourceModelSelector__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SourceModelSelector__Group_1__0__Impl
	rule__SourceModelSelector__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceModelSelector__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceModelSelectorAccess().getSourceModelSelectorAction_1_0()); }
(

)
{ after(grammarAccess.getSourceModelSelectorAccess().getSourceModelSelectorAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SourceModelSelector__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SourceModelSelector__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceModelSelector__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceModelSelectorAccess().getNullKeyword_1_1()); }

	'null' 

{ after(grammarAccess.getSourceModelSelectorAccess().getNullKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TargetModel__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TargetModel__Group__0__Impl
	rule__TargetModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetModel__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetModelAccess().getTargetModelAction_0()); }
(

)
{ after(grammarAccess.getTargetModelAccess().getTargetModelAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TargetModel__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TargetModel__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetModel__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetModelAccess().getReferenceAssignment_1()); }
(rule__TargetModel__ReferenceAssignment_1)
{ after(grammarAccess.getTargetModelAccess().getReferenceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ModelType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModelType__Group__0__Impl
	rule__ModelType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelTypeAccess().getTargetAssignment_0()); }
(rule__ModelType__TargetAssignment_0)
{ after(grammarAccess.getModelTypeAccess().getTargetAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModelType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModelType__Group__1__Impl
	rule__ModelType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelTypeAccess().getGroup_1()); }
(rule__ModelType__Group_1__0)?
{ after(grammarAccess.getModelTypeAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModelType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModelType__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelTypeAccess().getCollectionAssignment_2()); }
(rule__ModelType__CollectionAssignment_2)?
{ after(grammarAccess.getModelTypeAccess().getCollectionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ModelType__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModelType__Group_1__0__Impl
	rule__ModelType__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelType__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelTypeAccess().getSolidusKeyword_1_0()); }

	'/' 

{ after(grammarAccess.getModelTypeAccess().getSolidusKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModelType__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModelType__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelType__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelTypeAccess().getPropertyAssignment_1_1()); }
(rule__ModelType__PropertyAssignment_1_1)
{ after(grammarAccess.getModelTypeAccess().getPropertyAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NodeProperty__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeProperty__Group__0__Impl
	rule__NodeProperty__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeProperty__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodePropertyAccess().getPropertyAssignment_0()); }
(rule__NodeProperty__PropertyAssignment_0)
{ after(grammarAccess.getNodePropertyAccess().getPropertyAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeProperty__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeProperty__Group__1__Impl
	rule__NodeProperty__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeProperty__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodePropertyAccess().getGroup_1()); }
(rule__NodeProperty__Group_1__0)?
{ after(grammarAccess.getNodePropertyAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeProperty__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeProperty__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeProperty__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodePropertyAccess().getGroup_2()); }
(rule__NodeProperty__Group_2__0)?
{ after(grammarAccess.getNodePropertyAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NodeProperty__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeProperty__Group_1__0__Impl
	rule__NodeProperty__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeProperty__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodePropertyAccess().getLeftSquareBracketKeyword_1_0()); }

	'[' 

{ after(grammarAccess.getNodePropertyAccess().getLeftSquareBracketKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeProperty__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeProperty__Group_1__1__Impl
	rule__NodeProperty__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeProperty__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodePropertyAccess().getConstraintAssignment_1_1()); }
(rule__NodeProperty__ConstraintAssignment_1_1)
{ after(grammarAccess.getNodePropertyAccess().getConstraintAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeProperty__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeProperty__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeProperty__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodePropertyAccess().getRightSquareBracketKeyword_1_2()); }

	']' 

{ after(grammarAccess.getNodePropertyAccess().getRightSquareBracketKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NodeProperty__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeProperty__Group_2__0__Impl
	rule__NodeProperty__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeProperty__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodePropertyAccess().getSolidusKeyword_2_0()); }

	'/' 

{ after(grammarAccess.getNodePropertyAccess().getSolidusKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeProperty__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeProperty__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeProperty__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodePropertyAccess().getSubPropertyAssignment_2_1()); }
(rule__NodeProperty__SubPropertyAssignment_2_1)
{ after(grammarAccess.getNodePropertyAccess().getSubPropertyAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConstraintExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstraintExpression__Group__0__Impl
	rule__ConstraintExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintExpressionAccess().getCompareExpressionParserRuleCall_0()); }
	ruleCompareExpression
{ after(grammarAccess.getConstraintExpressionAccess().getCompareExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstraintExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstraintExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintExpressionAccess().getGroup_1()); }
(rule__ConstraintExpression__Group_1__0)?
{ after(grammarAccess.getConstraintExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConstraintExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstraintExpression__Group_1__0__Impl
	rule__ConstraintExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintExpressionAccess().getGroup_1_0()); }
(rule__ConstraintExpression__Group_1_0__0)
{ after(grammarAccess.getConstraintExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstraintExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstraintExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintExpressionAccess().getRightAssignment_1_1()); }
(rule__ConstraintExpression__RightAssignment_1_1)
{ after(grammarAccess.getConstraintExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConstraintExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstraintExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintExpressionAccess().getGroup_1_0_0()); }
(rule__ConstraintExpression__Group_1_0_0__0)
{ after(grammarAccess.getConstraintExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__ConstraintExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstraintExpression__Group_1_0_0__0__Impl
	rule__ConstraintExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintExpressionAccess().getConstraintExpressionLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getConstraintExpressionAccess().getConstraintExpressionLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstraintExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstraintExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintExpressionAccess().getOperatorAssignment_1_0_0_1()); }
(rule__ConstraintExpression__OperatorAssignment_1_0_0_1)
{ after(grammarAccess.getConstraintExpressionAccess().getOperatorAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CompareExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareExpression__Group__0__Impl
	rule__CompareExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExpressionAccess().getBasicConstraintParserRuleCall_0()); }
	ruleBasicConstraint
{ after(grammarAccess.getCompareExpressionAccess().getBasicConstraintParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExpressionAccess().getGroup_1()); }
(rule__CompareExpression__Group_1__0)?
{ after(grammarAccess.getCompareExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CompareExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareExpression__Group_1__0__Impl
	rule__CompareExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExpressionAccess().getGroup_1_0()); }
(rule__CompareExpression__Group_1_0__0)
{ after(grammarAccess.getCompareExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExpressionAccess().getRightAssignment_1_1()); }
(rule__CompareExpression__RightAssignment_1_1)
{ after(grammarAccess.getCompareExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CompareExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExpressionAccess().getGroup_1_0_0()); }
(rule__CompareExpression__Group_1_0_0__0)
{ after(grammarAccess.getCompareExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__CompareExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareExpression__Group_1_0_0__0__Impl
	rule__CompareExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExpressionAccess().getCompareExpressionLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getCompareExpressionAccess().getCompareExpressionLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExpressionAccess().getComparatorAssignment_1_0_0_1()); }
(rule__CompareExpression__ComparatorAssignment_1_0_0_1)
{ after(grammarAccess.getCompareExpressionAccess().getComparatorAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Negation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Negation__Group__0__Impl
	rule__Negation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationAccess().getExclamationMarkKeyword_0()); }

	'!' 

{ after(grammarAccess.getNegationAccess().getExclamationMarkKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Negation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Negation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationAccess().getConstraintAssignment_1()); }
(rule__Negation__ConstraintAssignment_1)
{ after(grammarAccess.getNegationAccess().getConstraintAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParenthesisConstraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesisConstraint__Group__0__Impl
	rule__ParenthesisConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesisConstraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesisConstraintAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getParenthesisConstraintAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesisConstraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesisConstraint__Group__1__Impl
	rule__ParenthesisConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesisConstraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesisConstraintAccess().getConstraintAssignment_1()); }
(rule__ParenthesisConstraint__ConstraintAssignment_1)
{ after(grammarAccess.getParenthesisConstraintAccess().getConstraintAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesisConstraint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesisConstraint__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesisConstraint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesisConstraintAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getParenthesisConstraintAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__InstanceOf__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InstanceOf__Group__0__Impl
	rule__InstanceOf__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceOf__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceOfAccess().getIsKeyword_0()); }

	'is' 

{ after(grammarAccess.getInstanceOfAccess().getIsKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InstanceOf__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InstanceOf__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceOf__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceOfAccess().getTypeAssignment_1()); }
(rule__InstanceOf__TypeAssignment_1)
{ after(grammarAccess.getInstanceOfAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TargetTraceModel__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TargetTraceModel__Group_1__0__Impl
	rule__TargetTraceModel__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetTraceModel__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetTraceModelAccess().getUseKeyword_1_0()); }

	'use' 

{ after(grammarAccess.getTargetTraceModelAccess().getUseKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TargetTraceModel__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TargetTraceModel__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetTraceModel__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetTraceModelAccess().getTraceModelReferenceParserRuleCall_1_1()); }
	ruleTraceModelReference
{ after(grammarAccess.getTargetTraceModelAccess().getTraceModelReferenceParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TraceModel__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TraceModel__Group__0__Impl
	rule__TraceModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceModel__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceModelAccess().getNameAssignment_0()); }
(rule__TraceModel__NameAssignment_0)
{ after(grammarAccess.getTraceModelAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TraceModel__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TraceModel__Group__1__Impl
	rule__TraceModel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceModel__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceModelAccess().getLessThanSignKeyword_1()); }

	'<' 

{ after(grammarAccess.getTraceModelAccess().getLessThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TraceModel__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TraceModel__Group__2__Impl
	rule__TraceModel__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceModel__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getTraceModelAccess().getNodeSetRelationsAssignment_2()); }
(rule__TraceModel__NodeSetRelationsAssignment_2)
{ after(grammarAccess.getTraceModelAccess().getNodeSetRelationsAssignment_2()); }
)
(
{ before(grammarAccess.getTraceModelAccess().getNodeSetRelationsAssignment_2()); }
(rule__TraceModel__NodeSetRelationsAssignment_2)*
{ after(grammarAccess.getTraceModelAccess().getNodeSetRelationsAssignment_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TraceModel__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TraceModel__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceModel__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceModelAccess().getGreaterThanSignKeyword_3()); }

	'>' 

{ after(grammarAccess.getTraceModelAccess().getGreaterThanSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__NodeSetRelation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeSetRelation__Group__0__Impl
	rule__NodeSetRelation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeSetRelation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeSetRelationAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getNodeSetRelationAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeSetRelation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeSetRelation__Group__1__Impl
	rule__NodeSetRelation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeSetRelation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeSetRelationAccess().getSourceNodesAssignment_1()); }
(rule__NodeSetRelation__SourceNodesAssignment_1)
{ after(grammarAccess.getNodeSetRelationAccess().getSourceNodesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeSetRelation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeSetRelation__Group__2__Impl
	rule__NodeSetRelation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeSetRelation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeSetRelationAccess().getGroup_2()); }
(rule__NodeSetRelation__Group_2__0)*
{ after(grammarAccess.getNodeSetRelationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeSetRelation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeSetRelation__Group__3__Impl
	rule__NodeSetRelation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeSetRelation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeSetRelationAccess().getColonKeyword_3()); }

	':' 

{ after(grammarAccess.getNodeSetRelationAccess().getColonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeSetRelation__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeSetRelation__Group__4__Impl
	rule__NodeSetRelation__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeSetRelation__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeSetRelationAccess().getTargetNodesAssignment_4()); }
(rule__NodeSetRelation__TargetNodesAssignment_4)
{ after(grammarAccess.getNodeSetRelationAccess().getTargetNodesAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeSetRelation__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeSetRelation__Group__5__Impl
	rule__NodeSetRelation__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeSetRelation__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeSetRelationAccess().getGroup_5()); }
(rule__NodeSetRelation__Group_5__0)*
{ after(grammarAccess.getNodeSetRelationAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeSetRelation__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeSetRelation__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeSetRelation__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeSetRelationAccess().getRightParenthesisKeyword_6()); }

	')' 

{ after(grammarAccess.getNodeSetRelationAccess().getRightParenthesisKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__NodeSetRelation__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeSetRelation__Group_2__0__Impl
	rule__NodeSetRelation__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeSetRelation__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeSetRelationAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getNodeSetRelationAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeSetRelation__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeSetRelation__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeSetRelation__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeSetRelationAccess().getSourceNodesAssignment_2_1()); }
(rule__NodeSetRelation__SourceNodesAssignment_2_1)
{ after(grammarAccess.getNodeSetRelationAccess().getSourceNodesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NodeSetRelation__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeSetRelation__Group_5__0__Impl
	rule__NodeSetRelation__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeSetRelation__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeSetRelationAccess().getCommaKeyword_5_0()); }

	',' 

{ after(grammarAccess.getNodeSetRelationAccess().getCommaKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeSetRelation__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeSetRelation__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeSetRelation__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeSetRelationAccess().getTargetNodesAssignment_5_1()); }
(rule__NodeSetRelation__TargetNodesAssignment_5_1)
{ after(grammarAccess.getNodeSetRelationAccess().getTargetNodesAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArrayLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayLiteral__Group__0__Impl
	rule__ArrayLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralAccess().getLeftCurlyBracketKeyword_0()); }

	'{' 

{ after(grammarAccess.getArrayLiteralAccess().getLeftCurlyBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayLiteral__Group__1__Impl
	rule__ArrayLiteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralAccess().getLiteralsAssignment_1()); }
(rule__ArrayLiteral__LiteralsAssignment_1)
{ after(grammarAccess.getArrayLiteralAccess().getLiteralsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayLiteral__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayLiteral__Group__2__Impl
	rule__ArrayLiteral__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteral__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralAccess().getGroup_2()); }
(rule__ArrayLiteral__Group_2__0)*
{ after(grammarAccess.getArrayLiteralAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayLiteral__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayLiteral__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteral__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getArrayLiteralAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ArrayLiteral__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayLiteral__Group_2__0__Impl
	rule__ArrayLiteral__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteral__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getArrayLiteralAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayLiteral__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayLiteral__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteral__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralAccess().getLiteralsAssignment_2_1()); }
(rule__ArrayLiteral__LiteralsAssignment_2_1)
{ after(grammarAccess.getArrayLiteralAccess().getLiteralsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
(
	'.' 
)
{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__GecoModel__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGecoModelAccess().getNameQualifiedNameParserRuleCall_1_0()); }
	ruleQualifiedName{ after(grammarAccess.getGecoModelAccess().getNameQualifiedNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GecoModel__ImportsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGecoModelAccess().getImportsImportParserRuleCall_2_0()); }
	ruleImport{ after(grammarAccess.getGecoModelAccess().getImportsImportParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GecoModel__RegisteredRootClassAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGecoModelAccess().getRegisteredRootClassRegisteredRootClassParserRuleCall_3_0()); }
	ruleRegisteredRootClass{ after(grammarAccess.getGecoModelAccess().getRegisteredRootClassRegisteredRootClassParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GecoModel__ModelsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGecoModelAccess().getModelsModelSequenceParserRuleCall_4_0()); }
	ruleModelSequence{ after(grammarAccess.getGecoModelAccess().getModelsModelSequenceParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GecoModel__FragmentsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGecoModelAccess().getFragmentsFragmentParserRuleCall_5_0()); }
	ruleFragment{ after(grammarAccess.getGecoModelAccess().getFragmentsFragmentParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportedNamespaceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportedNamespaceJvmTypeCrossReference_1_0()); }
(
{ before(grammarAccess.getImportAccess().getImportedNamespaceJvmTypeQualifiedNameParserRuleCall_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getImportAccess().getImportedNamespaceJvmTypeQualifiedNameParserRuleCall_1_0_1()); }
)
{ after(grammarAccess.getImportAccess().getImportedNamespaceJvmTypeCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RegisteredRootClass__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegisteredRootClassAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getRegisteredRootClassAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RegisteredRootClass__ImportedNamespaceAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegisteredRootClassAccess().getImportedNamespaceJvmTypeCrossReference_2_0_0()); }
(
{ before(grammarAccess.getRegisteredRootClassAccess().getImportedNamespaceJvmTypeQualifiedNameParserRuleCall_2_0_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getRegisteredRootClassAccess().getImportedNamespaceJvmTypeQualifiedNameParserRuleCall_2_0_0_1()); }
)
{ after(grammarAccess.getRegisteredRootClassAccess().getImportedNamespaceJvmTypeCrossReference_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RegisteredRootClass__IsTextAssignment_2_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegisteredRootClassAccess().getIsTextTextKeyword_2_1_0_0()); }
(
{ before(grammarAccess.getRegisteredRootClassAccess().getIsTextTextKeyword_2_1_0_0()); }

	'text' 

{ after(grammarAccess.getRegisteredRootClassAccess().getIsTextTextKeyword_2_1_0_0()); }
)

{ after(grammarAccess.getRegisteredRootClassAccess().getIsTextTextKeyword_2_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RegisteredRootClass__ExtensionAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegisteredRootClassAccess().getExtensionSTRINGTerminalRuleCall_2_1_1_0()); }
	RULE_STRING{ after(grammarAccess.getRegisteredRootClassAccess().getExtensionSTRINGTerminalRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModelSequence__ModifierAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelSequenceAccess().getModifierModelModifierEnumRuleCall_1_0()); }
	ruleModelModifier{ after(grammarAccess.getModelSequenceAccess().getModifierModelModifierEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModelSequence__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelSequenceAccess().getTypeModelTypeParserRuleCall_2_0()); }
	ruleModelType{ after(grammarAccess.getModelSequenceAccess().getTypeModelTypeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModelSequence__ModelsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelSequenceAccess().getModelsModelParserRuleCall_3_0()); }
	ruleModel{ after(grammarAccess.getModelSequenceAccess().getModelsModelParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModelSequence__ModelsAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelSequenceAccess().getModelsModelParserRuleCall_4_1_0()); }
	ruleModel{ after(grammarAccess.getModelSequenceAccess().getModelsModelParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Weaver__ReferenceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWeaverAccess().getReferenceJvmTypeCrossReference_1_0()); }
(
{ before(grammarAccess.getWeaverAccess().getReferenceJvmTypeIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getWeaverAccess().getReferenceJvmTypeIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getWeaverAccess().getReferenceJvmTypeCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Weaver__SourceModelAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWeaverAccess().getSourceModelSourceModelSelectorParserRuleCall_2_0_0()); }
	ruleSourceModelSelector{ after(grammarAccess.getWeaverAccess().getSourceModelSourceModelSelectorParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Weaver__AspectModelAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWeaverAccess().getAspectModelAspectModelParserRuleCall_3_0()); }
	ruleAspectModel{ after(grammarAccess.getWeaverAccess().getAspectModelAspectModelParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Weaver__TargetModelAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWeaverAccess().getTargetModelTargetModelParserRuleCall_4_1_0()); }
	ruleTargetModel{ after(grammarAccess.getWeaverAccess().getTargetModelTargetModelParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SeparateModels__PointcutAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeparateModelsAccess().getPointcutTargetModelParserRuleCall_1_0()); }
	ruleTargetModel{ after(grammarAccess.getSeparateModelsAccess().getPointcutTargetModelParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SeparateModels__AdviceAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeparateModelsAccess().getAdviceCombinedModelParserRuleCall_3_0()); }
	ruleCombinedModel{ after(grammarAccess.getSeparateModelsAccess().getAdviceCombinedModelParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__ReferenceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getReferenceJvmTypeCrossReference_1_0()); }
(
{ before(grammarAccess.getGeneratorAccess().getReferenceJvmTypeIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getGeneratorAccess().getReferenceJvmTypeIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getGeneratorAccess().getReferenceJvmTypeCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__SourceAuxModelsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getSourceAuxModelsSourceModelSelectorParserRuleCall_2_1_0()); }
	ruleSourceModelSelector{ after(grammarAccess.getGeneratorAccess().getSourceAuxModelsSourceModelSelectorParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__SourceAuxModelsAssignment_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getSourceAuxModelsSourceModelSelectorParserRuleCall_2_2_1_0()); }
	ruleSourceModelSelector{ after(grammarAccess.getGeneratorAccess().getSourceAuxModelsSourceModelSelectorParserRuleCall_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__SourceModelAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getSourceModelSourceModelSelectorParserRuleCall_4_0()); }
	ruleSourceModelSelector{ after(grammarAccess.getGeneratorAccess().getSourceModelSourceModelSelectorParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__TargetModelAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getTargetModelTargetModelParserRuleCall_5_1_0()); }
	ruleTargetModel{ after(grammarAccess.getGeneratorAccess().getTargetModelTargetModelParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__TargetTraceModelAssignment_6_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getTargetTraceModelTargetTraceModelParserRuleCall_6_1_1_0()); }
	ruleTargetTraceModel{ after(grammarAccess.getGeneratorAccess().getTargetTraceModelTargetTraceModelParserRuleCall_6_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__SourceTraceModelsAssignment_6_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getSourceTraceModelsTraceModelReferenceParserRuleCall_6_2_1_0()); }
	ruleTraceModelReference{ after(grammarAccess.getGeneratorAccess().getSourceTraceModelsTraceModelReferenceParserRuleCall_6_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__SourceTraceModelsAssignment_6_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneratorAccess().getSourceTraceModelsTraceModelReferenceParserRuleCall_6_2_2_1_0()); }
	ruleTraceModelReference{ after(grammarAccess.getGeneratorAccess().getSourceTraceModelsTraceModelReferenceParserRuleCall_6_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SourceModelSelector__ReferenceAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceModelSelectorAccess().getReferenceModelCrossReference_0_0_0()); }
(
{ before(grammarAccess.getSourceModelSelectorAccess().getReferenceModelIDTerminalRuleCall_0_0_0_1()); }
	RULE_ID{ after(grammarAccess.getSourceModelSelectorAccess().getReferenceModelIDTerminalRuleCall_0_0_0_1()); }
)
{ after(grammarAccess.getSourceModelSelectorAccess().getReferenceModelCrossReference_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SourceModelSelector__ConstraintAssignment_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceModelSelectorAccess().getConstraintConstraintExpressionParserRuleCall_0_1_1_0()); }
	ruleConstraintExpression{ after(grammarAccess.getSourceModelSelectorAccess().getConstraintConstraintExpressionParserRuleCall_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SourceModelSelector__PropertyAssignment_0_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceModelSelectorAccess().getPropertyNodePropertyParserRuleCall_0_2_1_0()); }
	ruleNodeProperty{ after(grammarAccess.getSourceModelSelectorAccess().getPropertyNodePropertyParserRuleCall_0_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TargetModel__ReferenceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetModelAccess().getReferenceModelCrossReference_1_0()); }
(
{ before(grammarAccess.getTargetModelAccess().getReferenceModelIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getTargetModelAccess().getReferenceModelIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getTargetModelAccess().getReferenceModelCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModelType__TargetAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelTypeAccess().getTargetRegisteredRootClassCrossReference_0_0()); }
(
{ before(grammarAccess.getModelTypeAccess().getTargetRegisteredRootClassIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getModelTypeAccess().getTargetRegisteredRootClassIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getModelTypeAccess().getTargetRegisteredRootClassCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModelType__PropertyAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelTypeAccess().getPropertyNodePropertyParserRuleCall_1_1_0()); }
	ruleNodeProperty{ after(grammarAccess.getModelTypeAccess().getPropertyNodePropertyParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModelType__CollectionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelTypeAccess().getCollectionLeftSquareBracketRightSquareBracketKeyword_2_0()); }
(
{ before(grammarAccess.getModelTypeAccess().getCollectionLeftSquareBracketRightSquareBracketKeyword_2_0()); }

	'[]' 

{ after(grammarAccess.getModelTypeAccess().getCollectionLeftSquareBracketRightSquareBracketKeyword_2_0()); }
)

{ after(grammarAccess.getModelTypeAccess().getCollectionLeftSquareBracketRightSquareBracketKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeProperty__PropertyAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodePropertyAccess().getPropertyJvmMemberCrossReference_0_0()); }
(
{ before(grammarAccess.getNodePropertyAccess().getPropertyJvmMemberIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getNodePropertyAccess().getPropertyJvmMemberIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getNodePropertyAccess().getPropertyJvmMemberCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeProperty__ConstraintAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodePropertyAccess().getConstraintConstraintExpressionParserRuleCall_1_1_0()); }
	ruleConstraintExpression{ after(grammarAccess.getNodePropertyAccess().getConstraintConstraintExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeProperty__SubPropertyAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodePropertyAccess().getSubPropertyNodePropertyParserRuleCall_2_1_0()); }
	ruleNodeProperty{ after(grammarAccess.getNodePropertyAccess().getSubPropertyNodePropertyParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintExpression__OperatorAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintExpressionAccess().getOperatorLogicOperatorEnumRuleCall_1_0_0_1_0()); }
	ruleLogicOperator{ after(grammarAccess.getConstraintExpressionAccess().getOperatorLogicOperatorEnumRuleCall_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintExpressionAccess().getRightConstraintExpressionParserRuleCall_1_1_0()); }
	ruleConstraintExpression{ after(grammarAccess.getConstraintExpressionAccess().getRightConstraintExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__ComparatorAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExpressionAccess().getComparatorComparatorEnumRuleCall_1_0_0_1_0()); }
	ruleComparator{ after(grammarAccess.getCompareExpressionAccess().getComparatorComparatorEnumRuleCall_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareExpressionAccess().getRightBasicConstraintParserRuleCall_1_1_0()); }
	ruleBasicConstraint{ after(grammarAccess.getCompareExpressionAccess().getRightBasicConstraintParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__ConstraintAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationAccess().getConstraintConstraintExpressionParserRuleCall_1_0()); }
	ruleConstraintExpression{ after(grammarAccess.getNegationAccess().getConstraintConstraintExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesisConstraint__ConstraintAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesisConstraintAccess().getConstraintConstraintExpressionParserRuleCall_1_0()); }
	ruleConstraintExpression{ after(grammarAccess.getParenthesisConstraintAccess().getConstraintConstraintExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceOf__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceOfAccess().getTypeJvmTypeCrossReference_1_0()); }
(
{ before(grammarAccess.getInstanceOfAccess().getTypeJvmTypeIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getInstanceOfAccess().getTypeJvmTypeIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getInstanceOfAccess().getTypeJvmTypeCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TraceModelReference__TraceModelAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceModelReferenceAccess().getTraceModelTraceModelCrossReference_0()); }
(
{ before(grammarAccess.getTraceModelReferenceAccess().getTraceModelTraceModelIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getTraceModelReferenceAccess().getTraceModelTraceModelIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getTraceModelReferenceAccess().getTraceModelTraceModelCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TraceModel__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceModelAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getTraceModelAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TraceModel__NodeSetRelationsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceModelAccess().getNodeSetRelationsNodeSetRelationParserRuleCall_2_0()); }
	ruleNodeSetRelation{ after(grammarAccess.getTraceModelAccess().getNodeSetRelationsNodeSetRelationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeSetRelation__SourceNodesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeSetRelationAccess().getSourceNodesNodeTypeParserRuleCall_1_0()); }
	ruleNodeType{ after(grammarAccess.getNodeSetRelationAccess().getSourceNodesNodeTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeSetRelation__SourceNodesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeSetRelationAccess().getSourceNodesNodeTypeParserRuleCall_2_1_0()); }
	ruleNodeType{ after(grammarAccess.getNodeSetRelationAccess().getSourceNodesNodeTypeParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeSetRelation__TargetNodesAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeSetRelationAccess().getTargetNodesNodeTypeParserRuleCall_4_0()); }
	ruleNodeType{ after(grammarAccess.getNodeSetRelationAccess().getTargetNodesNodeTypeParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeSetRelation__TargetNodesAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeSetRelationAccess().getTargetNodesNodeTypeParserRuleCall_5_1_0()); }
	ruleNodeType{ after(grammarAccess.getNodeSetRelationAccess().getTargetNodesNodeTypeParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeType__TypeAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeAccess().getTypeJvmTypeCrossReference_0()); }
(
{ before(grammarAccess.getNodeTypeAccess().getTypeJvmTypeIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getNodeTypeAccess().getTypeJvmTypeIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getNodeTypeAccess().getTypeJvmTypeCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteral__LiteralsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralAccess().getLiteralsLiteralParserRuleCall_1_0()); }
	ruleLiteral{ after(grammarAccess.getArrayLiteralAccess().getLiteralsLiteralParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteral__LiteralsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralAccess().getLiteralsLiteralParserRuleCall_2_1_0()); }
	ruleLiteral{ after(grammarAccess.getArrayLiteralAccess().getLiteralsLiteralParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntLiteralAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getIntLiteralAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatLiteralAccess().getValueFLOATTerminalRuleCall_0()); }
	RULE_FLOAT{ after(grammarAccess.getFloatLiteralAccess().getValueFLOATTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getValueBOOLEANTerminalRuleCall_0()); }
	RULE_BOOLEAN{ after(grammarAccess.getBooleanLiteralAccess().getValueBOOLEANTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


fragment RULE_DIGIT : '0'..'9';

RULE_FLOAT : ('-'? RULE_DIGIT+ '.' RULE_DIGIT* (('e'|'E') ('+'|'-')? RULE_DIGIT+)? 'f'?|'-'? RULE_DIGIT+ 'f');

RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


